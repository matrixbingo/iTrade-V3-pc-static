{
  "name": "hippo",
  "description": "Hippo, a simple solution for web analytics.",
  "version": "1.2.20-beta",
  "homepage": "https://github.com/kaelzhang/hippo",
  "author": {
    "name": "Kael",
    "email": "i@kael.me"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:kaelzhang/hippo.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.6.0"
  },
  "scripts": {
    "test": "make test"
  },
  "keywords": [],
  "main": "./lib/hippo3.js",
  "gitHead": "42601091761a1ef965189b08d866992d58231782",
  "readme": "# hippo\n\n> Dianping Web Analytics\n\n### 如果阅读完文档之后，还有任何疑问，可以直接在项目中提交新 [issue](http://code.dianpingoa.com/f2ei/hippo/issues) 来提问。\n\n## Synopsis\n\n示例代码见 [这里](http://i1.static.dp/demo/hippo.html)\n\n### 基本语法\n\n```\n_hip.push(action);\n```\n\n例如：发送一个 mv\n\n```\n_hip.push(['mv', {...}]);\n```\n\n## Actions\n\n### 发送 module view 请求\n\n```\n['mv', data_object]\n```\n\n#### 示例\n\n```\n_hip.push(['mv', {\n    module: '6_rec_fujin',\n    action: 'click'\n}]);\n```\n\n### 发送 page view 请求\n\n```\n['pv', data_object]\n```\n\n请 **特别注意**，大部分情况下，只要页面中加入 hippo，会自动发送一个 pv 请求，因此一般情况下，不需要主动调用该 action。\n\n如果要禁止页面自动发送，请参见下面条目。\n\n### 设置初始 pv 的参数\n\n设置自动发送的 pv 请求的数据。请注意，这个方法只会被运行一次。\n\n```\n['_setPVInitData', data_object]\n```\n\n### 禁止自动发送 pv\n\n```\n['_autoPV', false]\n```\n\n请注意，如果要让该代码生效，需要在 hippo.js 加载前，将其加入到初始化代码中。\n\n### 禁止自动进行页面性能统计\n\n```\n['_autoPageTiming', false]\n```\n请注意，如果要让该代码生效，需要在 hippo.js 加载前，将其加入到初始化代码中。\n\n### 设置页面的 page_id\n\n```\n['_setPageId', page_id]\n```\n\n若新业务无法确定自己的 page_id，则该代码行都不出现.\n\n### 设置页面的 city_id\n\n```\n['_setCityId', city_id]\n```\n\n城市 id，如上海的 city_id 为 1。有些业务跟城市无关，如后台等，则该代码行可不出现。\n\n### 设置页面的 shop_type\n\n_deprecated_\n\n```\n['_setShopType', shop_type]\n```\n\n目前，我们的网站上仅有 Category=1000 的页面，才会有 shop_type，因此，对于其他的页面，shop_type 可以传 0，或者该代码行都不出现.\n\n### 强制指定页面的地址\n\n```\n['_setHref', href]\n```\n##### 说明\n\n对于普通页面，请 **慎用** 该方法。\n\n\n### 强制指定页面的 referrer\n\n注意拼写：\n\n```\n['_setReferrer', referrer]\n```\n##### 说明\n\n1.\n如果你的页面，使用了某些 JavaScript MVC 框架来进行页面的渲染和路由，并且使用了 hash 来进行路由的操作，那么 `'_setReferrer'` 和 `'_setHref'` 方法会帮到你。\n但是 `referrer` 以及 `href` 的取值需要业务自己来管理。\n\n2.\n对于普通页面，请 **慎用** 该方法。\n\n\n### 设置服务端 GUID\n\n```\n['_setGuid', guid]\n```\n\nGuid 及 request id 被用于分析用户页面访问链路。\n\n**deprecated** 请使用 `['_setCustomConst', 'serverguid', guid]` 代替。\n\n### 设置页面的 Request ID\n\n```\n['_setRequestId', requestId]\n```\n\n**deprecated** 请使用 `['_setCustomConst', 'reqid', requestId]` 代替。\n\n\n### 设置全局的公用常量\n\n```\n['_setCustomConst', key, value]\n```\n\n执行该方法后，页面中的每个 pv 和 mv 请求都会包含该参数。\n\n\n## 初始化\n\n### 特别说明\n\n若您的业务，已经调用了页头服务（dp-common-web），那么在使用上，可以跳过 \\<1\\> 与 \\<2\\> 的步骤，因为页头服务已经默认包含 hippo.js 与 初始化的代码。\n\n### 1. 页面顶部 JavaScript\n\n\t<script>\n\tvar _hip = [\n\t    ['_setPageId', page_id],\n\t    ['_setCityId', city_id],\n\t    ['_setShopType', shop_type],\n\t    ['_setPVInitData', page_initial_data]\n\t];\n\t</script>\n\n上面的初始化代码片段，必须位于 web 页面源代码的 <head></head> 标签内，建议放置到页面所有的 JavaScript 代码块之前。\n\n\n#### 说明\n\n1. `_hip` 数组中，可以使用上面 \"actions\" 章节中说明的 action。\n2. 若所有的参数，在某个业务中均不需要设置，则代码为:\n\n```\n<script>\nvar _hip = [];\n</script>\n```\n\n#### 原理\n\n1. 当 hippo 的 JavaScript 文件被运行前，`_hip` 是一个 JavaScript 数组，我们可以使用数组的 `push` 方法给它加入更多的项（action）。这个时候 `_hip` 数组起到了一个简易的队列的作用。\n2. 当 JS 文件被运行之后，`_hip.push` 会变为一个自定义的函数，用来执行 hippo 相关的逻辑，同时原来的 `_hip` 数组中的项，会作为新的 `_hip.push` 函数的参数被执行。\n\n\n### 2. 依赖的 JS 文件\n\nA-1. 若您所负责的业务访问量较大，建议依赖 neocortex-4j，并使用 <@cortex.staticResource /> tag 来引入 \"/hls/hippo3.js\"\n\nA-2. 也可以通过 <@cortex.facade entry=\"hippo\" /> 标签来异步引入最新版本的hippo\n\nB. 若您所负责的业务生命周期较短，则可直接调用 http://i1.dpfile.com/hls/hippo3.min.js\n\n注意：不要从其他项目直接拷贝代码\n\n## 参数说明\n\n### data_object\n\n#### 参考文档\n\n[https://dper-my.sharepoint.cn/personal/jianfeng_yan_dianping_com/_layouts/15/WopiFrame2.aspx?sourcedoc=%7Bdb1d2f0b-a920-4866-ae64-e2e12e5555da%7D&action=default](https://dper-my.sharepoint.cn/personal/jianfeng_yan_dianping_com/_layouts/15/WopiFrame2.aspx?sourcedoc=%7Bdb1d2f0b-a920-4866-ae64-e2e12e5555da%7D&action=default)\n\n#### 说明\n\n`data_object` 是一个 JavaScript 数据对象，类似于 HashMap，\n它是由多个 key-value 对组成的，比如：\n\n```\n{\n    module: '1_rec_qita',\n    index: 1,\n    action: 'click'\n}\n```\n\n其中\n\n##### key: module\n在一个 hippo 打点中，module 是一个很重要的 key，它用于对当前的 hippo 打点起到“身份验证”的作用，在进行数据统计的时候，大多时候会首先根据 module 来进行筛选。\n\n所以，在收到 hippo 打点需求的时候，首先应当确定该打点的 module 名。\n\nmodule 名需要开发，BI，与需求方进行约定。\n\n##### 其他 key\n其他key，一般为描述性的键，这些键的含义及用法，可以参考上面的文档。\n\n\n## 使用场景\n\n这里说明几种使用场景，来说明最常用的使用方式，如果有任何疑问，可以到 [这里](http://code.dianpingoa.com/f2ei/hippo/issues) 创建新 issue 来提问。\n\n### 使用 dp-common-web 服务\n\n如果你的业务使用了 dp-common-web，并且使用了一些预先配置的页头模版，那么 **大部分情况下**，你不用进行任何 hippo 的配置。\n\n这种情况下，请跳过后面的内容。\n\n### 最常用的 Hippo 初始化代码\n\n常用的情况下，你不用进行任何的设置，但是最好在页面最顶部加入如下代码：\n\n```\n<script>\nvar _hip = [];\n</script>\n```\n\n这样做的好处是，当 hippo 的 JavaScript 文件没有加载到的时候，某些用户行为仍然能够被 hippo 记录。\n\n### Request Id 与 Guid\n\nGuid 及 request id 被用于分析用户页面访问链路。\n\n```\nvar _hip = [\n\t// 若这里已经有其他定义了，请在 `_hip` 这个数组中新增\n\t[ '_setCustomConst', 'reqid', 'xxxxxxx' ],\n\t[ '_setCustomConst', 'serverguid', 'xxxxxxx' ]\n];\n```\n\n关于如何获取到相关的参数，请查看后端相关文档。\n",
  "readmeFilename": "README.md",
  "_id": "hippo@1.2.20",
  "css": [],
  "entries": []
}
