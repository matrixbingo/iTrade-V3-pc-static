var gulp = require('gulp');
var webpack = require("webpack");
var del = require('del');
var path = require('path');
var fs = require('fs');
var runSequence = require('run-sequence').use(gulp);
var webpackConfig = require('./webpack.config.js');
var eslint = require('gulp-eslint');


gulp.task('clean', function() {
    var static_dir = path.resolve(__dirname, './build/');

    return del([
        static_dir + "/**/**",
        "./demo/build/**/**"
    ]);
});
//将webpack打包出来的文件复制到demo中，可以直接将demo文件夹发布到线上进行测试
gulp.task('move2demo', function() {
  gulp.src(['./build/**/**'])
    .pipe(gulp.dest('./demo/build/'));
});

//使用knb load的包
gulp.task("webpack", function(callback) {
    // run webpack
    webpack(webpackConfig, function(err, stats) {
        var e = [].concat(err).concat(stats.compilation.errors).filter(Boolean)[0];
        if (e) {
          console.error(e); // We need the full description of the error
          throw e;
        }
        callback();
    });
});
// 独立使用knb_dpapp,knb_mtnb包
gulp.task("webpack-2", function(callback) {
    webpackConfig.entry = {
        "knb_dp": './lib/dpapp/index.js',
        "knb_mt": './lib/mtnb/index.js',
        "knb_hb": './lib/hbnb/index.js',
        "knb_wx": './lib/wx/index.js',
        "knb_titans": './lib/titans/index.js',
    };
    // run webpack
    webpack(webpackConfig, function(err, stats) {
        var e = [].concat(err).concat(stats.compilation.errors).filter(Boolean)[0];
        if (e) {
          console.error(e); // We need the full description of the error
          throw e;
        }
        callback();
    });
});

gulp.task('lint', () => {
    return gulp.src(['index.js','lib/**/*.js','!node_modules/**'])
        .pipe(eslint())
        .pipe(eslint.format())
        .pipe(eslint.failAfterError());
});


gulp.task('default', function() {
    //task prebuild
    runSequence('clean','webpack','webpack-2','move2demo');
});

gulp.task('hbnb-adapt', function() {
  var commonApis = new Set([
    'account.getUser',
    'pay.getFingerprint',
    'account.login',
    'position.getCity',
    'webview.open',
    'webview.close',
    'share.callLocal',
    'share.activeNavButton',
    'webview.setTitle',
    'webview.setMenus',
    'storage.setItem',
    'storage.getItem',
  ]);
  var dirPaths = [
    'core', 'account', 'log', 'network',
    'pay', 'position', 'storage', 'thirdApps',
    'ui', 'webview', 'tower', 'flight',
    'train', 'inject', 'travel', 'env',
    'share',
  ];

  var apis = {};
  var cnt = 0;
  var hbnbPath = path.dirname(require.resolve('@hfe/hbnb'))

  dirPaths.forEach((dirPath) => {
    fs.readdirSync(path.join(hbnbPath, dirPath))
      .filter((filePath) => filePath.endsWith('.js') && !filePath.endsWith('index.js'))
      .forEach((filePath) => {
        var text = fs.readFileSync(path.join(hbnbPath, dirPath, filePath), 'utf-8')
        var match = text.match(/\/\*\*[\s\S]+\*\//)[0]
        var lines = match.split(/\n/)

        var api = {
          params: []
        }
        lines.forEach((line) => {
          line = line.trim()
          if (!line.startsWith('* @')) {
            return
          }

          var tag = line.match(/^\*\s+@(\w+)/)[1]
          if (tag === 'param') {
            var param = line.match(/\s+\[?(\w+)\]?,?(?=\s+|$)/)
            if (param && param.length > 1) {
              api.params.push(param[1])
            } else {
              console.log('发现没有参数的私有API', path.join(dirPath, filePath))
            }
          } else if (tag.startsWith('return')) {
            api['return'] = line.match(/\{(\w+)(?=<|})/)[1]
          } else if (tag === 'name' || tag === 'memberof') {
            api[tag] = line.replace(/^\*\s+@\w+(\s+|$)/, '')
          }
        })

        if (!api.name) {
          return;
        }

        var key = `${api.memberof}.${api.name}`

        if (!commonApis.has[key]) {
          if (!apis[key]) {
            if (api.params.length > 0) cnt++
            apis[key] = api
          } else {
            console.log('发现重复的私有API', key, path.join(dirPath, filePath))
          }
        }
      })
  })

  fs.writeFileSync('./lib/hbnb/uncommon-apis.js', `module.exports = ${JSON.stringify(apis, null, 2)};`)
})
