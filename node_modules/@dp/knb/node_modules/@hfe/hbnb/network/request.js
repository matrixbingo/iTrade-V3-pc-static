'use strict';

var debug;
var assert;
if (process.env.NODE_ENV !== 'production') {
    debug = require('debug')('hbnb:module:network:request');
    assert = require('assert');
}

var _invoke = require('../invoke');


/**
 * 发起网络请求
 *
 * @memberof network
 * @static
 * @name request
 * @param {Object} opts 请求参数，参考 [request](https://github.com/request/request#requestoptions-callback)
 * @return {Promise<resp|err>}
 * @example
 *  hbnb.network.request({
 *      url: 'https://www.google.com/',
 *      method: 'GET',
 *      headers: {
 *          'X-Requested-With': 'XMLHttpRequest'
 *      },
 *      body: '',
 *      followRedirect: true,
 *      maxRedirects: 10,
 *      timeout: 5000
 *  }).then(function(resp) {
 *      resp = {
 *          statusCode: 404,
 *          body: '',
 *          headers: {
 *              'content-encoding': ['gzip']
 *          }
 *      }
 *  }).catch(function(err) {
 *      err = {
 *          message: "用户未登录美团",
 *          status: -1
 *      }
 *  });
 *
 */

module.exports = function(opts) {
    if (process.env.NODE_ENV !== 'production') {
        debug('request opts is %j', opts);
        assert(opts.url);
        assert(typeof opts.method === 'undefined' || ['GET', 'POST', 'PUT', 'DELETE'].indexOf(opts.method.toUpperCase()) !== -1);
        assert(typeof opts.headers === 'undefined' || typeof opts.headers === 'object');
        assert(typeof opts.body === 'undefined' || typeof opts.body === 'string');
        assert(typeof opts.followRedirect === 'undefined' || typeof opts.followRedirect === 'boolean');
        assert(typeof opts.maxRedirects === 'undefined' || typeof opts.maxRedirects === 'number');
        assert(typeof opts.timeout === 'undefined' || typeof opts.timeout === 'number');
    }
    if (opts.headers) {
        var newHeaders = {};
        var headers = opts.headers;
        for (var key in headers) {
            if (headers.hasOwnProperty(key)) {
                newHeaders[key.toLowerCase()] = headers[key];
            }
        }
        opts.headers = newHeaders;
    }

    var p = new Promise(function(resolve, reject) {
        _invoke('network', 'request', {
            url: opts.url,
            method: opts.method ? opts.method.toUpperCase() : 'GET',
            headers: opts.headers ? opts.headers : {},
            body: opts.body ? opts.body : '',
            followRedirect: !(opts.followRedirect === false),
            maxRedirects: opts.maxRedirects ? opts.maxRedirects : 10,
            timeout: opts.timeout ? opts.timeout : 5000,
            insecure: opts.insecure ? opts.insecure : false,
            responseEncoding: opts.responseEncoding ? opts.responseEncoding : '',
            callback: function(response) {
                if (process.env.NODE_ENV !== 'production') {
                    debug('request success, %j', response, response);
                }
                var newHeaders = {};
                var headers = response.headers;
                for (var i = 0, ii = headers.length; i < ii; i++) {
                    var header = headers[i];
                    var index = header.indexOf(';');
                    if (index === -1) continue;
                    var key = header.substr(0, key).trim().toLowerCase();
                    var val = header.substr(index + 1).trim();
                    newHeaders[key] = val;
                }
                response.headers = newHeaders;
                resolve(response);
            },
            errback: function(msg) {
                if (process.env.NODE_ENV !== 'production') {
                    debug('request fail, %j', msg);
                }
                reject(msg);
            }
        });
    });

    return p;
};
