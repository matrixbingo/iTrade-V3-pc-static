'use strict';
var util = require('../util');
var core = require('../core');
var patch7  = require('./patch-7.0.0');

//更新的API: share, initShare, closeWindow, _parseFeed
//新增的API: setTitle等
var newAPIs = [
    'setLLButton', 
    'setLRButton', 
    'setRLButton', 
    'setRRButton',
    'setTitle',
    'sendSMS',
    'publish',
    'closeWindow'
  ];

var _events = {};
var pageEvents = ['appear', 'disappear', 'scroll'];
function getPageMethodName(name) {
  var result = 'on' + core._captal(name);
  // fix for android 7.6.0
  if (util.osName == 'android' && util.appVersion == '7.6.0' && /appear|disappear/.test(name)) {
    result = name;
  }
  return result;
}

var getUA = (function() {
  var uastr = navigator.userAgent;
  var appVersionMatch = uastr.match(/dp\/[\w\.\d]+\/([\d\.]+)/);
  var appVersion = appVersionMatch && appVersionMatch[1];
  var matchPackageId = uastr.match(/dp\/(com\.dianping\.\w+)/);
  var packageId = matchPackageId && matchPackageId[1];
  var adapterMatch = uastr.match(/adapter\/([\d\.]+)/);
  var adapterVersion = adapterMatch && adapterMatch[1];

  return function(opt) {
    var success = opt && opt.success;
    var ua = {
      platform: 'dpapp',
      appName: 'dianping',
      packageId: packageId,
      appVersion: appVersion,
      osName: core._osUA.name,
      osVersion: core._osUA.version,
      adapterVersion: adapterVersion
    };
    success && success(ua);
    return ua;
  };
})();

var Patch = module.exports = {
  appVersion: '7.1.0',
  pay: patch7.pay,
  
  uploadImage: patch7.uploadImage,
  
  getUA: getUA,

  ready: function(callback) {
    var self = this;
    this._send('ready', {
      success: function() {
        self._isReady = true;
        callback();
      }
    });
  },

  login: function(opt) {
    var self = this;
    var loginUser;

    function getUser(callback) {
      self.getUserInfo({
        success: callback
      });
    }
    getUser(function(result) {
      if (result.token) {
        opt.success && opt.success(result);
      } else {
        var loginEvent = 'loginSuccess';
        var appearEvent = 'appear';

        var loginSuccessHandler = function() {
          getUser(function (user) {
            loginUser = user;
          });
          self.unsubscribe({
            action: loginEvent,
            handle: loginSuccessHandler
          });
        };

        self.subscribe({
          action: loginEvent,
          handle: loginSuccessHandler
        });

        var appearHandler = function () {
          getUser(function (user) {
            if (user && user.token) {
              opt.success && opt.success(user);
            }else{
              opt.fail && opt.fail(user);
            }
            
          });
          self.unsubscribe({
            action: appearEvent,
            handle: appearHandler
          });
        };

        self.subscribe({
          action: appearEvent,
          handle: appearHandler
        }); 

        self.openScheme({
          url: 'dianping://login'
        });
      }
    });
  },
  updateAccount: function(opt) {
    opt = opt || {};
    var self = this;
    var dper = document.cookie.match(/dper=\w+/);
    if (dper) {
      dper = dper[0].split('=')[1];
    }

    if (opt.dper) {
      dper = opt.dper;
    }

    if (!dper) {
      return opt.fail && opt.fail('Missing dper');
    }
    var _loopGetUserInfo = function(success, fail) {
      var retries = 0;
      function loopGetUserInfo() {
        self.getUserInfo({
          success: function(info) {
            if (info.token) {
              success && success(info);
            } else {
              if (retries > 5) {
                fail && fail();
              } else {
                retries++;
                setTimeout(function() {
                  loopGetUserInfo();
                }, 100);
              }
            }
          }
        });
      }
      loopGetUserInfo();
    };

    var url
    if (location.protocol === 'http') {
      url = 'http://m.api.dianping.com/mlogin/convertdper.api'
    }else{
      url = 'https://mapi.dianping.com/mapi/mlogin/convertdper.api'
    }

    self.ajax({
      url: url,
      data: {
        dper: dper
      },
      keys: ['Token', 'NewToken'],
      success: function(result) {
        var ua = self.getUA();
        if (self.Semver.gte(ua.appVersion, '7.5.0')) {
          self._send('updateAccount', {
            token: result.Token,
            newtoken: result.NewToken,
            success: function() {
              self.getUserInfo({
                success: opt.success
              });
            },
            fail: opt.fail
          });
        } else {
          self._send('loginsuccess', {
            token: result.Token,
            newtoken: result.NewToken
          });

          _loopGetUserInfo(opt.success, opt.fail);
        }
      },
      fail: opt.fail
    });
  },
  _parseFeed: function(f){
    var feed;
    if (!f) {
      return 0xff;
    } else if (f.constructor.toString().indexOf('Array') >= 0) {
      feed = [0, 0, 0, 0, 0, 0, 0, 0];
      f.forEach(function(pos) {
        feed[7 - pos] = 1;
      });
      return parseInt(feed.join(''), 2);
    }
  },
  share: function(opt) {
    opt.feed = this._parseFeed(opt.feed);
    opt.url = this._tidyUrlParams(opt.url);
    this._send('share', opt);
  },
  initShare: function(opt) {
    var self = this;
    this.setRRButton({
      icon: 'H5_Share',
      handle: function() {
        opt.handle && opt.handle();
        self.share({
          title: opt.title,
          desc: opt.desc,
          content: opt.content,
          image: opt.image,
          feed: opt.feed,
          url: opt.url,
          success: opt.success,
          fail: opt.fail
        });
      }
    });
  },
  subscribe: function(opt) {
    var name = opt.action;
    var handle = opt.handle;

    function mainHandler(e) {
      _events[name] && _events[name].length && _events[name].forEach(function(func) {
        func && func(e);
      });
    }

    if (_events[name]) {
      opt.success && opt.success();
      _events[name].push(handle);
    } else {
      this._send('subscribe', {
        action: name,
        success: opt.success,
        handle: mainHandler
      });

      _events[name] = [handle];
    }
  },

  unsubscribe: function(opt) {
    var name = opt.action;
    var success = opt.success;
    var handle = opt.handle;

    var index = _events[name] ? _events[name].indexOf(handle) : -1;

    if (index != -1) {
      _events[name].splice(index, 1);
      success && success();
      if (!_events[name].length) {
        _events[name] = null;
      }
    } else if (!handle) {
      _events[name] = null;
    }

    if (!_events[name]) {
      this._send('unsubscribe', {
        action: name,
        success: success
      });
    }
  },

  openScheme: function(opt) {
    var url = opt.url;
    var extra = opt.extra;
    if (extra) {
      url += '?' + this._convertUrlParams(extra);
      delete opt.extra;
      opt.url = url;
    }
    this._send('openScheme', opt);
  }
};

newAPIs.forEach(function (api) {
  Patch[api] = util.actionMapping(api);
});

pageEvents.forEach(function(name) {
  Patch[getPageMethodName(name)] = function (){};
});