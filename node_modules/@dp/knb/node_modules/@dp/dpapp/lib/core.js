'use strict';
var Core = require('@dp/dpapp-core');
var mixin = require('./util/mixin');
var util = require('./util');

var NOOP = function(){};

var core = module.exports = new Core({
  hippoPrefix:'dpapp',
  getTypeFromUA: util.getWebviewVersion,
  apis: [],
  allowBeforeReady: ['getRequestId'],
  isOldVersion: function(){
    return this.uaType() == '6.9.x';
  },
  cache: {},
  Share: {
    WECHAT_FRIENDS: 0,
    WECHAT_TIMELINE: 1,
    QQ: 2,
    SMS: 3,
    WEIBO: 4,
    QZONE: 5,
    EMAIL: 6,
    COPY: 7
  },
  _tidyUrlParams: function(url){
    var splited = url.split('?');
    var qs = splited[1];
    var reserved = [];
    if(!qs){
      return splited[0];
    }else{
      qs.split('&').forEach(function(q){
        var k = q.split('=')[0];
        if(!/^(newtoken|token|product)$/.test(k) ){
          reserved.push(q);
        }
      });
      return [splited[0], reserved.join('&')].join('?');
    }
  },
  _getEnv : function(callback) {
    var self = this;
    this._doSendMessage('getEnv', {}, function(env){
      self.cache['env'] = env;
      callback.call(this, env);
    });
  },
  _captal: function(str) {
    return str.slice(0, 1).toUpperCase() + str.slice(1);
  },
  _getBizName: function(opt) {
    var fail = opt.fail;
    var bizname = this._cfg.bizname;
    if (!bizname) {
      fail && fail('use `DPApp.config({bizname:"<your-bizname>"})` first');
      return false;
    } else {
      return bizname;
    }
  },
  isStatusOK : NOOP,
  did_handle_callback : NOOP, 
  _doSendMessage: function (method, args, callback) {
    var self = this;
    var hasCallback = callback && typeof callback == 'function';
    this.log('调用方法', method, args);

    /**
     * pass 0 as callbackId
     * thus _callbacks[callbackId] is undefined
     * nothing will happen
     * @type {Number}
     */
    var callbackId = hasCallback ? this._generateCallbackId() : 0;
    var callbackName = this._generateCallbackName(callbackId);
    
    if (hasCallback){
      window[callbackName] = callback;
    }

    /**
     * check type for args
     */
    if(!args || typeof args !== 'object'){
      args = {};
    }

    // 某些版本app很任性的把callbackId参数放到args里了
    args.callbackId = callbackId;
    args = JSON.stringify(args);

    var _DPApp = window._DPApp;

    var bridgeUrl = 'js://_?method=' + method + '&args=' + encodeURIComponent(args) + '&callbackId=' + callbackId;
    
    this._sendMessage2Native(bridgeUrl); 
  },
  _sendByPrompt: function(message) {
    this.log('[Prompt] message: ' +message);
    window.prompt(message);
  },
  _sendByIframe: function(message) {
    this.log('[Iframe] message: ' + message);
    this._createIframe(message);
  },
  _sendMessage2Native: function(message) {
    var SUPPORTVERSION = '8.0.6';
    if (this.Semver.gte(util.appVersion, SUPPORTVERSION) && util.osName === 'android') {
      this._sendByPrompt(message);
    }else{
      this._sendByIframe(message);
    }
  },
  _send: function(method, args){
    args = args || {};
    var self = this;
    var _success = args.success;
    var _fail = args.fail;
    var _handle = args.handle;

    var fail = function(result){
      self.log('调用失败 ' + method, result);
      _fail && _fail.call(self, result);
    }

    var success = function(result){
      self.log('调用成功 ' + method, result);
      _success && _success.call(self, result);
    }

    var handle = function(result){
      self.log('回调 ' + method, result);
      _handle && _handle.call(self, result);
    }

    var callback = (_success || _fail || _handle) ? function(result){
      var status = result.status;

      if(result.result != "next"){
        delete result.result;
      }
      if(status == "success"){
        success && success(result);
      }else if(status == "action"){
        handle && handle(result);
      }else{
        fail && fail(result);
      }
    } : null;
    this._sendMessage(method, args, callback);
  },
  callback: function(callbackId, retValue){
    var win = window;
    var callbackFuncName = this._generateCallbackName(callbackId);
    var callback = window[callbackFuncName];

    if(callback){
      this.log("[Callback] Id: " + callbackId);
      setTimeout(function(){
        callback && callback.call(self,retValue);
      });
      if(retValue.result == "complete" || retValue.result == "error"){
        win[callbackFuncName] = null;
        delete win[callbackFuncName];
      }
    }
  },
  merge: function(core, newCore) {
    if (core.__type__ === 'npm' || core.__type__ === 'cortex') {
      console.warn('引入了多个DPApp,目前DPApp版本是',core.__version__,', 后续引入的DPApp无法生效');
      return core;
    }else{
      console.warn('引入了多个DPApp,正在进行mixin形式的合并');
      return mixin(core, newCore);
    }
  }
});