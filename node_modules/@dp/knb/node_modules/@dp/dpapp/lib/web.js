'use strict';
var mixin = require('./util/mixin');
var apis = require('./apis');
var web = {};

var EVENT_VISIBILITY_CHANGE = 'webkitvisibilitychange';
var EVENT_SCROLL = 'scroll';

/**
 * Common
 * 基础功能，所有app都会用到
 */
mixin(web, {
  version: 'web',
  getUA: function(opt) {
    var success = opt && opt.success;
    var ua = {
      platform: 'web',
      appName: null,
      appVersion: null,
      osName: this._osUA.name,
      osVersion: this._osUA.version
    };
    success && success(ua);
    return ua;
  },
  ready: function(fn) {
    var self = this;
    var readyRE = /complete|loaded|interactive/;
    if (readyRE.test(document.readyState) && document.body) {
      self._isReady = true;
      fn();
    } else {
      document.addEventListener('DOMContentLoaded', function() {
        self._isReady = true;
        fn();
      }, false);
    }
  },
  ajax: function(opts) {
    var METHOD_GET = 'GET';
    var url = opts.url;
    var method = (opts.method || METHOD_GET).toUpperCase();
    var headers = opts.headers || {};
    var data = opts.data;
    var success = opts.success;
    var fail = opts.fail;

    var xhr = new XMLHttpRequest();

    if (!url) {
      url = location.href.split('?')[0];
    }

    if (method === METHOD_GET && data) {
      url += parseQuery(data);
      data = null;
    }

    if (method !== METHOD_GET) {
      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    }

    function parseQuery(data) {
      var queryString = '';
      for (var key in data) {
        queryString += key + '=' + encodeURIComponent(data[key]);
      }
      return queryString;
    }

    xhr.onreadystatechange = function() {
      if (xhr.readyState == 4) { // ready
        xhr.onreadystatechange = function() {};
        var result, error = false;
        if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {
          result = xhr.responseText;

          try {
            result = /^\s*$/.test(result) ? null : JSON.parse(result);
          } catch (e) {
            error = e;
          }

          if (error) fail && fail('ERR_PARSE_JSON');
          else success(result);
        } else {
          fail && fail(xhr.statusText);
        }
      }
    };

    xhr.open(opts.method, url, true, opts.username, opts.password);
    for (var name in headers) {
      xhr.setRequestHeader(name, headers[name]);
    }
    xhr.send(data);
  },
  closeWindow: function() {
    window.close();
  }
});

/**
 * Infos
 */
mixin(web, {
  getLocation: function(opts) {
    var success = opts.success;
    var fail = opts.fail;
    navigator.geolocation.getCurrentPosition(function(position) {
      success && success({
        lat: position.coords.latitude,
        lng: position.coords.longitude
      });
    }, function() {
      fail && fail('ERR_GET_LOCATION');
    });
  },
  getCityId: function(opt) {
    var result;
    var getCookie = function(name) {
      if (!result) {
        result = {};
        document.cookie.split(';').forEach(function(p) {
          var c = p.trim().split('=');
          var name = c[0];
          var value = c[1];
          result[name] = value;
        });
      }
      return result[name];
    };

    var cityId = getCookie('cy') || getCookie('cityid');
    if (!cityId) {
      cityId = null;
    }

    opt && opt.success && opt.success({
      cityId: cityId
    });
  },
  getCity: function (opt) {
    return this.getCityId(opt);
  }
});

/**
 * Funcs
 */
mixin(web, {
  share: function(opts) {
    var success = opts.success;

    var title = opts.title;
    var desc = opts.desc;
    var content = opts.content;
    var pic = opts.image;
    var url = opts.url;

    require.async('dpapp-share', function(share) {
      share.pop({
        title: title,
        desc: desc,
        content: content,
        pic: pic,
        url: url
      });
      success && success();
    });
  }
});

/**
 * UI
 */
mixin(web, {
  setTitle: function(opts) {
    var title = opts.title;
    if (title) {
      document.title = title;
    }
    opts.success && opts.success();
  }
});


/**
 * Broadcast
 */
var _events = {};
mixin(web, {
  subscribe: function(opts) {
    var self = this;
    var name = opts.action;
    var success = opts.success;
    var handle = opts.handle;
    var fail = opts.fail;
    if (!name || !handle) {
      fail && fail('missing params');
      return;
    }
    if (_events[name]) {
      _events[name].push(handle);
    } else {
      _events[name] = [handle];
    }

    if (name == EVENT_SCROLL) {
      window.addEventListener(EVENT_SCROLL, self._scrollEvent);
    }
    if (name == 'appear') {
      document.addEventListener(EVENT_VISIBILITY_CHANGE, self._appearEvent);
    }

    if (name == 'disappear') {
      document.addEventListener(EVENT_VISIBILITY_CHANGE, self._disappearEvent);
    }

    success && success();
  },
  _appearEvent: function() {
    if (document.hidden == false) {
      DPApp.publish({
        action: 'appear'
      });
    }
  },
  _disappearEvent: function() {
    if (document.hidden == true) {
      DPApp.publish({
        action: 'disappear'
      });
    }
  },
  _scrollEvent: function() {
    DPApp.publish({
      action: EVENT_SCROLL,
      data: {
        offset: window.scrollY
      }
    });
  },
  unsubscribe: function(opts) {
    var self = this;
    var name = opts.action;
    var success = opts.success;
    var handle = opts.handle;
    var fail = opts.fail;
    if (!name) {
      fail && fail('Missing params');
      return;
    }
    var events = _events;
    var funcs = events[name];
    if (!funcs) {
      success && success();
      return;
    }
    if (handle) {
      var index = funcs.indexOf(handle);
      events[name] = funcs.splice(index, 1);
    } else {
      if (name == EVENT_SCROLL) {
        window.removeEventListener(EVENT_SCROLL, self._scrollEvent);
      }
      delete events[name];
    }
    success && success();
  },
  openScheme: function(opts) {
    var iframe = document.createElement('iframe');
    var extra = opts.extra;
    var url = opts.url;
    if (extra) {
      url += '?' + this._convertUrlParams(extra);
      delete opts.extra;
    }
    iframe.style.display = 'none';
    iframe.src = url;
    document.body.appendChild(iframe);
  },
  publish: function(opts) {
    if (!opts.action) {
      return;
    }
    var name = opts.action;
    var data = opts.data;
    var success = opts.success;
    var funcs = _events[name];
    funcs && funcs.forEach(function(func) {
      func(data);
    });
    success && success();
  }
});

var mock = document.cookie.match(/dpapp-mocker=(\w+)/);
if (mock) {
  mock = mock[1];
}

var jsonp_callback_id = 1;

function jsonp(name) {
  return function(opts) {
    var params = JSON.stringify(opts);
    var success = opts.success;
    var fail = opts.fail;
    var handle = opts.handle;
    var script = document.createElement('script');
    var funcName = 'jsonp_callback' + jsonp_callback_id;
    jsonp_callback_id++;
    script.src = location.protocol + '//localhost:1943/?' + 'method=' + name + '&params=' + encodeURIComponent(params) + '&callback=' + funcName;

    window[funcName] = function(result) {
      var status = result.status;
      if (status == 'success') {
        success && success(result);
      } else if (status == 'action') {
        handle && handle(result);
      } else {
        fail && fail(result);
      }
    };
    document.body.appendChild(script);
  };
}

apis.forEach(function(name) {
  if (mock == 'force') {
    web[name] = jsonp(name);
  } else if (!web.hasOwnProperty(name)) {
    if (mock == 'patch') {
      web[name] = jsonp(name);
    }
  }
});

module.exports = web;