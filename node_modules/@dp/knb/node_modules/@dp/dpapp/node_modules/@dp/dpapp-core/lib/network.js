module.exports = {
  _iOSNetworkType: function (result) {
    var networkType;
    var types = {
      kSCNetworkReachabilityFlagsTransientConnection: 1 << 0,
      kSCNetworkReachabilityFlagsReachable: 1 << 1,
      kSCNetworkReachabilityFlagsConnectionRequired: 1 << 2,
      kSCNetworkReachabilityFlagsConnectionOnTraffic: 1 << 3,
      kSCNetworkReachabilityFlagsInterventionRequired: 1 << 4,
      kSCNetworkReachabilityFlagsConnectionOnDemand: 1 << 5,
      kSCNetworkReachabilityFlagsIsLocalAddress: 1 << 16,
      kSCNetworkReachabilityFlagsIsDirect: 1 << 17,
      kSCNetworkReachabilityFlagsIsWWAN: 1 << 18
    };
    var type = +result.type;
    var subType = result.subType;
    var returnValue;
    // 2g, 3g, 4g
    function getMobileType(subType) {
      switch (subType) {
        case "CTRadioAccessTechnologyGPRS":
        case "CTRadioAccessTechnologyEdge":
        case "CTRadioAccessTechnologyCDMA1x":
          return "2g";
        case "CTRadioAccessTechnologyLTE":
          return "4g";
        case "CTRadioAccessTechnologyWCDMA":
        case "CTRadioAccessTechnologyHSDPA":
        case "CTRadioAccessTechnologyHSUPA":
        case "CTRadioAccessTechnologyCDMA1x":
        case "CTRadioAccessTechnologyCDMAEVDORev0":
        case "CTRadioAccessTechnologyCDMAEVDORevA":
        case "CTRadioAccessTechnologyCDMAEVDORevB":
        case "CTRadioAccessTechnologyeHRPD":
          return "3g";
      }
    }

    if ((type & types.kSCNetworkReachabilityFlagsReachable) == 0) {
      return "none";
    }

    if ((type & types.kSCNetworkReachabilityFlagsConnectionRequired) == 0) {
      // if target host is reachable and no connection is required
      //  then we'll assume (for now) that your on Wi-Fi
      returnValue = "wifi";
    }


    if (
      (type & types.kSCNetworkReachabilityFlagsConnectionOnDemand) != 0
      ||
      (type & types.kSCNetworkReachabilityFlagsConnectionOnTraffic) != 0
    ) {
      // ... and the connection is on-demand (or on-traffic) if the
      //     calling application is using the CFSocketStream or higher APIs
      if ((type & types.kSCNetworkReachabilityFlagsInterventionRequired) == 0) {
        // ... and no [user] intervention is needed
        returnValue = "wifi";
      }
    }

    if ((type & types.kSCNetworkReachabilityFlagsIsWWAN) == types.kSCNetworkReachabilityFlagsIsWWAN) {
      // ... but WWAN connections are OK if the calling application
      //     is using the CFNetwork (CFSocketStream?) APIs.
      returnValue = getMobileType(subType);
    }

    return returnValue;
  },
  _androidNetworkType: function (result) {
    var type = result.type;
    var subType = result.subType;

    if (type == 0) {
      switch (subType) {
        case 1:
        case 2:
        case 4:
        case 7:
        case 11:
          return "2g";
        case 3:
        case 5:
        case 6:
        case 8:
        case 9:
        case 10:
        case 12:
        case 14:
        case 15:
          return "3g";
        case 13:
          return "4g";
      }
    }

    if (type == 1) {
      return "wifi";
    } else {
      return "none";
    }
  },
  getNetworkType : function(opt) {
    var self = this;
    var _success = opt.success;

    this._send("getNetworkType", {
      success: function(result) {
        var ua = self._osUA;
        var networkType;

        switch (ua.name) {
          case "iphone":
            networkType = this._iOSNetworkType(result);
            break;
          case "android":
            networkType = this._androidNetworkType(result);
            break;
        }

        _success && _success({
          networkType: networkType,
          raw: {
            type: result.type,
            subType: result.subType
          }
        });
      },
      fail: opt.fail
    });
  }
}