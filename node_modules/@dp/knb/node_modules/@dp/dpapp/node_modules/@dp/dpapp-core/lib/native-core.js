/**
 * count from 1
 * @type {Number}
 */
var _events = {};
/**
 * mapping for all callbacks
 * @type {Object}
 */
var pageEvents = ["appear", "disappear"];
var queue = require('./queue');
var q = queue(function(data){
  DPApp._doSendMessage(data.method, data.args, data.callback);
});

module.exports = {
	_dequeueTimeout: null,
  _messageQueue : q,
  dequeue: function(){
    var self = this;
    setTimeout(function(){
      DPApp && DPApp.log && DPApp.log("Dequeue");
      clearTimeout(this._dequeueTimeout);
      self._dequeueTimeout = null;
      q.dequeue();
    }, 0);
  },
  ready: function(callback){
    var self = this;
    this._send("ready", {
      success: function(){
        self._isReady = true;
        callback();
      }
    });
  },
  openScheme: function(opt){
    var url = opt.url;
    var extra = opt.extra;
    if(extra){
      url += "?" + this._convertUrlParams(extra);
      delete opt.extra;
      opt.url = url;
    }
    this._send('openScheme', opt);
  },
  _sendMessage: function(method, args, callback){
    var self = this;
    q.push({
      method: method,
      args: args,
      callback: callback
    });
    this._dequeueTimeout = setTimeout(function(){
      self.dequeue();
    },1000);

  },
  // _generateCallbackId: function(){
  //   var rand = Math.floor(Math.random() * 1000);
  //   var timestamp = +new Date();
  //   return +(timestamp + "" + rand);
  // },
  _generateCallbackId: function () {
    var rand = Math.floor(Math.random() * 1000);
    var timestampStr = +new Date() + '';
    //在DPAPP老版本中callbackId为int型，故只选取8位
    var timestamp = timestampStr.substr(timestampStr.length - 5, 5);
    return +(timestamp + "" + rand);
  },
  _generateCallbackName: function(callbackId){
    return "DPApp_callback_" + callbackId;
  },
  /**
   * send message to native
   * @param  {String}   method
   * @param  {Object}   args
   * @param  {Function} callback
   */
  _doSendMessage: function (method, args, callback) {
      var hasCallback = callback && typeof callback == 'function';
      this.log('调用方法', method, args);

      /**
       * pass 0 as callbackId
       * thus _callbacks[callbackId] is undefined
       * nothing will happen
       * @type {Number}
       */
      var callbackId = hasCallback ? this._generateCallbackId() : 0;
      
      if (hasCallback){
        window[this._generateCallbackName(callbackId)] = callback;
      }

      /**
       * check type for args
       */
      if(!args || typeof args !== 'object'){
        args = {};
      }

      // 某些版本app很任性的把callbackId参数放到args里了
      args.callbackId = callbackId;
      args = JSON.stringify(args);

      var bridgeUrl = 'js://_?method=' + method + '&args=' + encodeURIComponent(args) + '&callbackId=' + callbackId;

      this.log('创建iframe ' + method, "callbackId:" + callbackId);
      this._createIframe(bridgeUrl);
  },
  _createNode: function(src, type){
    /**
     * create node
     * and native will intercept and handle the process
     */
    var node = document.createElement(type);
    node.style.display = 'none';

    function removeNode(){
      node.onload = node.onerror = null;
      node.parentNode && node.parentNode.removeChild(node);
    }
    /**
     * remove node after loaded
     */
    node.onload = node.onerror = removeNode;
    setTimeout(removeNode, 5000);
    node.src = src;
    document.body.appendChild(node);
  },
  _createIframe: function(src){
    this._createNode(src, "iframe");
  },
  _send: function(method, args){
    args = args || {};
    var self = this;
    var _success = args.success;
    var _fail = args.fail;
    var _handle = args.handle;

    var fail = function(result){
      self.log('调用失败 ' + method, result);
      _fail && _fail.call(self, result);
    }

    var success = function(result){
      self.log('调用成功 ' + method, result);
      _success && _success.call(self, result);
    }

    var handle = function(result){
      self.log('回调 ' + method, result);
      _handle && _handle.call(self, result);
    }

    var callback = (_success || _fail || _handle) ? function(result){
      var status = result.status;
      if(result.result != "next"){
        delete result.result;
      }
      if(status == "success"){
        success && success(result);
      }else if(status == "action"){
        handle && handle(result);
      }else{
        fail && fail(result);
      }
    } : null;

    this._sendMessage(method, args, callback);

  },

  _convertUrlParams: function(params){
    var result = [];
    for(var i in params){
      result.push(i + "=" + encodeURIComponent(params[i]));
    }
    return result.join("&");
  },
  _sanitizeAjaxOpts: function(args){
    args.method = args.method || "get";
    args.data = args.data || "";
    var url = args.url;
    var data = args.data;

    if (args.method == "get") {
      var params = [];
      for (var p in data) {
        if (data.hasOwnProperty(p) && (data[p] || data[p] === 0)) {  // allow `something=0' param
          params.push(p + '=' + encodeURIComponent(data[p]));
        }
      }

      if (params.length) {
        url += url.indexOf('?') == -1 ? "?" : "&";
        url += params.join('&');
      }
      args.url = url;
      delete args.data;
    }
    return args;
  },
  _parseFeed: function(f){
    var feed;
    if (!f) {
      return 0xff;
    } else if (f.constructor.toString().indexOf("Array") >= 0) {
      feed = [0, 0, 0, 0, 0, 0, 0, 0];
      f.forEach(function(pos) {
        feed[7 - pos] = 1;
      });
      return parseInt(feed.join(""), 2);
    }
  },
  _transModel: function(keys, obj){
    if(!keys){return obj;}
    var keymap = {};

    function getHash(str) {
      var hashCode = function(str) {
        var hash = 0,
          i, chr, len;
        if (str.length == 0) return hash;
        for (i = 0, len = str.length; i < len; i++) {
          chr = str.charCodeAt(i);
          hash = ((hash << 5) - hash) + chr;
          hash |= 0; // Convert to 32bit integer
        }
        return hash;
      };

      var i = hashCode(str);
      return "0x" + ((0xFFFF & i) ^ (i >>> 16)).toString(16);
    }

    function generateKeys(keys) {
      keys.forEach(function(key) {
        keymap[getHash(key)] = key;
      });
    }

    function isArray(val) {
      return Object.prototype.toString.call(val) == "[object Array]";
    }

    function isObject(val) {
      return Object.prototype.toString.call(val) == "[object Object]";
    }

    function translate(obj){
      if (isObject(obj)) {
        delete obj.__name;
        for (var key in obj) {
          var val;
          if (keymap[key]) {
            val = obj[keymap[key]] = obj[key];
            translate(val);
            delete obj[key];
          }
        }
      } else if (isArray(obj)) {
        obj.forEach(function(item) {
          translate(item);
        });
      }
      return obj;
    }

    keys.forEach(function(key) {
      keymap[getHash(key)] = key;
    });

    return translate(obj);
  },
  _capital: function(str){
    return str.slice(0,1).toUpperCase() + str.slice(1);
  },
  subscribe : function(opt) {
    var self = this;
    var name = opt.action;
    var success = opt.success;
    var handle = opt.handle;
    var messageName;

    function mainHandler(e){
      _events[name] && _events[name].length && _events[name].forEach(function(func) {
        func && func(e);
      });
    }

    function registerPageEvents(){
      if(messageName){
        self[messageName] = mainHandler;
        opt.success && opt.success();
      }
    }

    if (_events[name]) {
      opt.success && opt.success();
      _events[name].push(handle);
    } else {
      if(pageEvents.indexOf(name) != -1){
        messageName = "on" + self._capital(name);
        if(name == 'scroll'){
          // 仅scroll事件需要toggle开关
          this._send(messageName, {
            success: registerPageEvents
          });
        }else{
          // 不然就直接注册上了
          registerPageEvents();
        }
      }else{
        this._send("subscribe", {
          action: name,
          success: opt.success,
          handle: mainHandler
        });
      }

      _events[name] = [handle];
    }
  },

  unsubscribe : function(opt) {
    var name = opt.action;
    var success = opt.success;
    var handle = opt.handle;
    var self = this;

    var index = _events[name] ? _events[name].indexOf(handle) : -1;

    function unregisterPageEvents(){
      self[callbackName] = NOOP;
    }

    if (index != -1) {
      _events[name].splice(index, 1);
      success && success();
      if(!_events[name].length){
        _events[name] = null;
      }
    }else if(!handle){
      _events[name] = null;
    }

    if(!_events[name]){
      // unregister
      // if is page event
      if(pageEvents.indexOf(name) != -1 && after7_6){
        var messageName = "off" + self._capital(name);
        var callbackName = "on" + self._capital(name);
        // 与安卓确认
        if(name == 'scroll'){
          this._send(messageName, {
            success: unregisterPageEvents
          });
        }else{
          unregisterPageEvents();
        }
      }else{
        this._send("unsubscribe", {
          action: name,
          success: success
        });
      }
    }
    // if not found, remove all;
  },

  getUA: function(){},
  /**
   * callback function to be invoked from native
   * @param  {Number} callbackId
   * @param  {Object} retValue
   */
  callback: function(callbackId, retValue){
    var win = window;
    var callbackFuncName = this._generateCallbackName(callbackId);
    var callback = window[callbackFuncName];

    if(callback){
      this.log("触发回调 ", "callbackId:" + callbackId);
      setTimeout(function(){
        callback && callback.call(self,retValue);
      });
      if(retValue.result == "complete" || retValue.result == "error"){
        win[callbackFuncName] = null;
        delete win[callbackFuncName];
      }
    }
  }
};