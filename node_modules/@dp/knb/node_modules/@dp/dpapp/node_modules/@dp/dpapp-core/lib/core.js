function mixin(to, from) {
  for (var key in from) {
    to[key] = from[key];
  }
  return to;
}

var Core = module.exports = function(options){
  options = options || {};
  var self = this;
  for(var key in options){
    this[key] = options[key];
  }


  var apis = options.apis || require('./apis');
  (options.extraApis || []).forEach(function(name){
    if(apis.indexOf(name) === -1){
      apis.push(name);
    }
  });

  this.apis = apis;
  this.allowBeforeReady = this.allowBeforeReady || ["getRequestId"];


  apis.forEach(function(name) {
    if(!self[name]){
      self[name] = function(options) {
        self._send(name, options);
      }
    }
  });

  this.decorate();
};

Core.prototype = {
  _cfg: {
    debug: false
  },
  _isProduct: !!location.href.match(".dianping.com"),
  _isReady: false,
  config: function(config) {
    for(var key in config){
      this._cfg[key] = config[key];
    }
  },
  /**
   * 是否为古早版本
   */
  isOldVersion: function(){
    return false;
  },
  getQuery: function (){
    var query = location.search.slice(1);
    var ret = {};
    query.split("&").forEach(function(pair){
      var splited = pair.split("=");
      ret[splited[0]] = splited[1];
    });
    return ret;
  },
  patchForType: function(version, patch){
    if(this.uaType() == version){
      this.extend(patch);
      this.decorate();
    }
  },
  decorate: require('./decorate'),
  Semver: {
    eq: function(a, b) {
      return a === b;
    },
    gt: function(a, b) {
      var splitedA = a ? a.split(".") : [];
      var splitedB = b ? b.split(".") : [];
      [0,1,2].forEach(function(i){
        splitedA[i] = splitedA[i] || 0;
        splitedB[i] = splitedB[i] || 0;
      });
      if (+splitedA[0] !== +splitedB[0]) {
        return +splitedA[0] > +splitedB[0];
      } else {
        if (+splitedA[1] !== +splitedB[1]) {
          return +splitedA[1] > +splitedB[1];
        } else {
          return +splitedA[2] > +(splitedB[2] || 0);
        }
      }
    },
    lt: function(a, b) {
      return !this.gte(a, b);
    },
    gte: function(a, b) {
      return this.eq(a, b) || this.gt(a, b);
    },
    lte: function(a, b) {
      return this.eq(a, b) || this.lt(a, b);
    }
  },
  _parseUA: function(ua){
    var osName, osVersion, versionMatch;
    if (ua.match(/iPhone/)) {
      osName = "iphone";
      osVersion = ua.match(/iPhone\sOS\s([\d_]+)/i)[1].replace(/_/g, ".");
    } else if (ua.match(/Android/)) {
      osName = "android";
      versionMatch = ua.match(/Android[\s|\/]([\w\.]+)/);
      osVersion = versionMatch && versionMatch[1];
    } else {
      osName = null;
      osVersion = null;
    }
    return {
      name: osName,
      version: osVersion
    }
  },
  getTypeFromUA: function(userAgent){
    return /dp\/com\.dianping\.(\w+)\//.test(userAgent)
      ? userAgent.match(/dp\/com\.dianping\.(\w+)\//)[1]
      : "web"
  },
  uaType: function(){
    return this.getTypeFromUA(navigator.userAgent);
  },
  _trace: function(name, params){
    if(!this.hippoPrefix){return;}
    var logFact = (this._cfg && this._cfg.logFact) || 0.05;
    params = params || {};
    params = this._mixin(params, {
      module: this.hippoPrefix + "_" + name
    });
    if(Math.random() < logFact){
      console.log("_trace", name)
      window._hip && _hip.push(['mv', params]);
    }
  },
  log: function() {

    var message = [];
    for(var i=0; i < arguments.length; i++){
      if(typeof arguments[i] == "string"){
        message.push(arguments[i]);
      }else if(arguments[i] != undefined){
        message.push(JSON.stringify(arguments[i]));
      }
    }

    message = message.join(" ");
    if (this._cfg && this._cfg.debug) {
      setTimeout(function(){
        alert(message);
      });
    }else{
      console.log(message);
    }
  },
  _mixin: mixin,
  extend: function(args) {
    return this._mixin(this, args);
  },
  _notImplemented: function notImplemented(opt) {
    opt && opt.fail && opt.fail({
      errMsg:"ERR_NOT_IMPLEMENTED"
    });
  },
  isSupport: function(funcName) {
    var api = this[funcName];
    return !!(api
      && typeof api == "function"
      && api != this._notImplemented
      && api._notReady != true)
  }
};

Core.prototype._osUA = Core.prototype._parseUA(navigator.userAgent);