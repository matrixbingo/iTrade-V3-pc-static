/**********
 * KNB for dianping webview
 * version 1.0
 *********/

var DPApp = require('@dp/dpapp');
var apiDPApp = require('./api');
var shareConst = require('./share');
var logEvent = require('../common/log');
var promisify = require('../promisify');
var version = require('../common/version');
var Titans = require('../titans/titans');
var mixin = require('../common/mixin');
var isWebProtocol = require('../common/web-protocol');
var qs = require('querystring');
var semver = require('../common/semver');
var picConverter = require('../common/picConverter');

var KNB = {
  __version__: version,

  ready: function(cb) {
    DPApp.ready(cb);
  },

  config: function(opts) {
    DPApp.config(opts);
    Titans.config(opts);
  },

  isApiSupported: function(opts) {
    var isSupport;
    if (this[opts.apiName] instanceof Function) {
      isSupport = true;
    }else{
      isSupport = DPApp.isSupport(opts.apiName);
    }
    if (navigator.userAgent.indexOf('TitansX') > -1) return Titans.isApiSupported(opts);
    opts.success(isSupport);
  },

  getUserInfo: function(opts) {
    var success = opts.success;
    opts.success = function(user) {
      success({
        type: 'dp',
        userId: user.userId,
        uuid: user.dpid,
        token: user.token
      });
    };
    DPApp.getUserInfo(opts);
  },

  login: function(opts) {
    var success = opts.success;
    opts.success = function(user) {
      success({
        type: 'dp',
        userId: user.userId,
        token: user.token
      });
    };
    DPApp.login(opts);
  },

  getFingerprint: function(opts) {
    var success = opts.success;
    opts.success = function(ret) {
      var fp = '';
      try {
        fp = JSON.parse(ret.fingerprint).fingerprint;
      }catch (ex){
        fp = ret.fingerprint;
      }
      success({
        fingerprint: fp
      });
    };
    DPApp.getCX(opts);
  },

  getCity: function(opts) {
    var success = opts.success;
    opts.success = function(city) {
      success({
        type: 'dp',
        cityId: city.cityId
      });
    };
    DPApp.getCity(opts);
  },

  getLocationCity: function(opts) {
    var success = opts.success;
    opts.success = function(city) {
      success({
        type: 'dp',
        cityId: city.locCityId
      });
    };
    DPApp.getCity(opts);
  },

  openWebview: function(opts) {
    opts = mixin({}, opts);
    if (isWebProtocol(opts.url)) opts.url = 'dianping://web?' + qs.stringify(mixin({url: opts.url}, opts.qs));
    DPApp.openScheme(opts);
  },

  jumpWebview: function(opts) {
    opts = mixin({}, opts);
    if (isWebProtocol(opts.url)) opts.url = 'dianping://web?' + qs.stringify(mixin({url: opts.url}, opts.qs));
    DPApp.jumpToScheme(opts);
  },

  closeWebview: function(opts) {
    DPApp.closeWindow(opts);
  },

  share: function(opts) {
    // TODO: parse channel
    opts = mixin({}, opts);
    opts.feed = opts.channel;
    if (!(opts.feed instanceof Array)) {
      opts.feed = [opts.feed];
    }
    if (opts.feed && opts.feed.length === 1) {
      opts.shareType = opts.feed[0];
    }
    DPApp.share(opts);
  },

  configShare: function(opts) {
    var self = this;
    opts = mixin({}, opts);
    DPApp.setRRButton({
      icon: 'H5_Share',
      handle: function() {
        opts.handle && opts.handle();
        self.share(opts);
      }
    });
  },

  setNavButtons: function(opts) {
    if (!(opts instanceof Array)) {
      opts = [opts];
    }
    opts.forEach(function(btnConfig) {
      var method =  'set'+ btnConfig.position + 'Button';
      delete btnConfig.position;
      if (btnConfig.type === 'base64') {
        try{
          btnConfig.icon = btnConfig.icon.split('data:image/png;base64,')[1];
        }catch(e){
          console.log('get base64 icon failed');
        }
      }
      DPApp[method](btnConfig);
    });
  },

  setLLButton: function(opts) {
    opts = mixin({}, opts);
    if (/^data:image\/png;base64/.test(opts.icon)) {
      try {
        opts.icon = opts.icon.split('data:image/png;base64,')[1];
      } catch (e) {
        console.log('get base64 icon failed');
      }
    }

    DPApp.setLLButton(opts);
  },

  uploadImage: function (opts) {
    opts = mixin({}, opts);
    var success = opts.success || function () {};
    opts.success = function (ret) {
      ret.photoInfos = (ret.photoInfos || []).map(function (photo) {
        return mixin({}, photo, {picKey: picConverter(photo.picKey), originalKey: photo.picKey})
      });
      success(ret);
    }
    DPApp.uploadImage(opts)
  },

  getUA: require('../common/get-ua'),

  use: function(name, opts) {
    if (DPApp[name] instanceof Function) {
      return DPApp[name](opts);
    }
    return Titans.use(name, opts);
  }
};

(function() {
  for (var key in shareConst) {
    KNB.share[key] = shareConst[key];
  }
})();

(function commonFnMap(commonAPI) {
  commonAPI.forEach(function(api) {
    //没有单独实现的API统一生成
    if (!KNB[api]) {
      if (typeof(api) == 'string') {
        KNB[api] = DPApp[api];
      }else{
        //API接口变更的处理
        var key = Object.keys(api)[0];
        KNB[key] = function() {
          DPApp[api[key]](arguments[0]);
        };
      }
    }
  });
})(apiDPApp);

KNB.subscribe = Titans.subscribe.bind(Titans);
KNB.unsubscribe = Titans.unsubscribe.bind(Titans);
KNB.publish = Titans.publish.bind(Titans);
KNB.getNetworkType = Titans.getNetworkType.bind(Titans);

DPApp.getUA({
  success: function (ua) {
    var appVersion = ua.appVersion;
    if (semver.gte(appVersion, '9.1.2')) KNB.lxlog = Titans.lxlog.bind(Titans)
  }
});

//被引用统计
logEvent('dpapp', KNB.__version__);

promisify(KNB);

module.exports = KNB;

