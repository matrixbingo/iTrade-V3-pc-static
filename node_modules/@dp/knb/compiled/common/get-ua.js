var QS = require('querystring');
function getUAInfo() {
  var lua = (navigator.userAgent + '').toLowerCase();
  var VER_REG_STR = "([0-9][0-9.a-zA-Z_]+)";
  var regexp = function (str) { return new RegExp(str, 'i'); };
  var isstr  = function (str) { return typeof str === 'string'; };
  var href = location.href;
  var qs = QS.parse((location.search || '').slice(1));

  var apps = {
    dianping: [/com\.dianping\.ba.\w+/, /com\.dianping\.\w+/],
    meituan: ['meituangroup', /com.meituan.imeituan-?\w+/],
    maoyanpro: ['moviepro', 'moviepro/android'],
    maoyan: ['movie'],
    moma: ['moma'],
    daxiang: ['xm'],

    wechat: ['micromessenger'],
    qq: ['qq'],

    unknown: ['never_match_anything'],
  };
  var appName = function () {
     var names = Object.keys(apps);
     for (var i = 0; i < names.length; i++) {
       var matchers = apps[names[i]];
       for (var j = 0; j < matchers.length; j++) {
         if (isstr(matchers[j]) ? regexp('\\W' + matchers[j] + '\\W').test(lua) : matchers[j].test(lua)) return names[i]; 
       }
     }
     return "unknown";
  }();
  var appVersion = function () {
    var matchers = apps[appName];
    for (var i = 0; i < matchers.length; i++) {
      var mstring = isstr(matchers[i]) ? matchers[i] : matchers[i].source;
      var m = lua.match(regexp(mstring + ' ' + VER_REG_STR)) || lua.match(regexp(mstring + '/' + VER_REG_STR));
      if (m) return m[1];
    }
    return "0";
  }();
  var osName = function () {
    if (/android/.test(lua)) return 'android';
    if (/ios|iphone|ipod|ipad/.test(lua)) return 'ios';
    if (/macintosh/.test(lua)) return 'mac';
    if (/windows/.test(lua)) return 'windows';
    return "unknown";
  }();
  var osVersion = function () {
    var m;
    // https://developer.chrome.com/multidevice/user-agent
    // order matters!
    if (osName === 'android') m  =  lua.match(regexp('android '+ VER_REG_STR)) || lua.match(regexp('android/'+ VER_REG_STR));
    if (osName === 'ios') m = lua.match(regexp(VER_REG_STR +' like Mac OS X')) || lua.match(regexp('iOS/' + VER_REG_STR));

    // 通常而言mac/window的版本不重要，无视之
    return (m ? m[1] : '0').replace(/_/g, '.');
  }();

  // internal version info
  // MATCHED INDEX:     1  2              3      4             5       6
  // EXAMPLE:         KNB/1.1.0         Android/5.1     MeituanGroup/7.3.1
  var reg1 = regexp(("(KNB)/" + VER_REG_STR + " (\\w+)/" + VER_REG_STR + " (\\w+)/" + VER_REG_STR));
  var reg2 = regexp(("(KNB)/" + VER_REG_STR + " (\\w+)/" + VER_REG_STR + " ([a-z1-9A-Z_.-]+/[a-z1-9A-Z_.-]+)/" + VER_REG_STR));
  var m   = lua.match(reg1) || lua.match(reg2);
  var _knbVersion = m && m[2];

  // Try KNB Generic Mode
  if (appName === 'unknown' && m) {
    appName    = m[5];
    appVersion = m[6];
  }

  // God knowns who you are
  if (appName === 'unknown') {
    // waimai app
    if (href.indexOf('wm_ctype=') > -1) appName = "waimai";
    // meituan like app < 7.0
    if (/iphone|ipod|ipad|android/.test(href)) {
      if ((qs.utm_campaign || '').indexOf('Agroup') > -1) appName = 'meituan';
      appVersion = qs.version_name;
    }
  }

  return {
    appName: appName,
    appVersion: appVersion,
    osName: osName,
    osVersion: osVersion,

    _knbVersion: _knbVersion
  };
}

function getUA(ref) {
  var success = ref.success;

  success && success(getUAInfo());
}

// The actual method
getUA.internal = getUAInfo;

module.exports = getUA;
