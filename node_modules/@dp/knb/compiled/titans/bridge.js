var queue = require('./util/queue')
var mixin = require('../common/mixin')
var noop = function () {}

var callbackUtil = {
  getName: function (callbackId) {
    return 'DPApp_callback_' + callbackId
  },
  getId: function () {
    var rand = Math.floor(Math.random() * 1000)
    var timestampStr = (+new Date()).toString()
    // 在DPAPP老版本中callbackId为int型，故只选取8位
    var timestamp = timestampStr.substr(timestampStr.length - 5, 5)
    return +(timestamp + '' + rand)
  }
}

var isForceDebug = function () {
  return location.href.indexOf('knb_force_titans_debug=1') > -1
}

var mtnbCBID = 1
var messageHandlers = {}
function regHandler (fn) {
  var id = 'cb_' + (mtnbCBID++) + '_' + new Date().getTime()
  messageHandlers[id] = fn
  return id
}

var DPApp = {
  _delay: 1000,
  _isDebug: false,
  _dequeueTimeout: null,

  //防止@dp/app重写Titans的DPApp
  __type__: 'npm',
  __name__: 'titansX',
  queue: undefined,
  readyQueue: [],
  _isReadying: false,
  config: function (config) {
    this._isDebug = config.debug
    this._isReady = config.ready
  },
  setBridge: function (bridge) {
    if (typeof bridge === 'function') {
      this._bridge = bridge
      this._delay = 0
    } else {
      this._bridge = bridge.name
      this._delay = bridge.delay
    }
  },
  log: function () {
    var arguments$1 = arguments;

    var message = []
    for (var i = 0; i < arguments.length; i++) {
      if (typeof arguments$1[i] == 'string') {
        message.push(arguments$1[i])
      } else if (arguments$1[i] != undefined) {
        message.push(JSON.stringify(arguments$1[i]))
      }
    }

    if (this._isDebug || isForceDebug()) return setTimeout(function () { return alert(message.join(' ')); })
    if (window._KNB_LOG) return window._KNB_LOG(message.join(' '))
  },
  ready: function (callback) {
    var self = this
    if (self._isReady) {
      return callback && callback()
    }

    if (self._isReadying) {
      return self.readyQueue.push(callback)
    }else{
      self._isReadying = true
    }

    self.log('[Auth   ]: 正在进行鉴权')
    this.callNative('ready', {
      success: function () {
        self._isReady = true
        self._isReadying = false
        self.log('鉴权成功')
        self.readyQueue.forEach(function(cb) {
          cb && cb()
        })
        self.readyQueue = []
      },
      fail: function (err) {
        self.log('鉴权失败', err)
      }
    })
  },
  callNative: function (method, args) {
    if ( args === void 0 ) args = {};

    this.log('[Call  ]', method)
    var self = this

    function wrap (name, fn) {
      return function (result) {
        self.log(("[" + name + " ] " + method), result)
        fn && fn.call(self, result)
      }
    }

    // Wrap with log info
    var fail = wrap('Failed', args.fail)
    var success = wrap('Success', args.success)
    var handle = wrap('Trigger', args.handle)

    // adapt for MTNB proxy
    args = mixin({
      handlerId: regHandler(handle)
    }, args)

    self.enqueue(method, args, function (result) {
      var status = result.status
      var data = result.__isFromMTNB ? result.data : result
      if (status === 'success' || String(status) == '0') return success(data)
      if (status === 'action') return handle(data)
      return fail(result);
    })
  },
  enqueue: function (method, args, callback) {
    var self = this
    this.queue = this.queue || queue(function (ref) {
      var method = ref.method;
      var args = ref.args;
      var callback = ref.callback;

      return self.doSendMessage(method, args, callback);
    })
    this.log('[Enqueue]', method)
    this.queue.push({method: method, args: args, callback: callback})
    // run task every 1000ms if queue is not empty
    this._dequeueTimeout = setTimeout(function () { return self.dequeue('Auto'); }, self._delay * self.queue.tasks.length)
  },
  dequeue: function (source) {
    source = source || 'Native'
    var self = this
    this.log('[Dequeue]', 'by' , source)
    setTimeout(function () {
      clearTimeout(self._dequeueTimeout)
      self._dequeueTimeout = null
      self.queue.dequeue()
    }, 0)
  },
  doSendMessage: function (method, args , callback) {
    if ( args === void 0 ) args = {};

    var callbackId = this.createCallback(callback)

    args = JSON.stringify(args)

    var message = 'js://_?method=' + method + '&args=' + encodeURIComponent(args) + '&callbackId=' + callbackId
    this.log('[Send]', method, 'with callbackId:', callbackId, 'has params: ', args)

    if (typeof this._bridge === 'function') return this._bridge(message)
    if (this._bridge === 'prompt') return this.sendByPrompt(message)
    this.sendByIframe(message)
  },
  sendByPrompt: function (message) {
    this.log('[Send By Prompt]', message)
    window.prompt(message)
  },
  sendByIframe: function (message) {
    this.log('[Send By iframe]', message)
    var node = document.createElement('iframe')
    node.style.display = 'none'

    var removeNode = function () {
      node.onload = node.onerror = null
      node.parentNode && node.parentNode.removeChild(node)
    }

    /*
      remove node after loaded or error
      */
    node.onload = node.onerror = removeNode
    setTimeout(removeNode, 3000)
    node.src = message
    document.body.appendChild(node)
  },
  createCallback: function (callback) {
    var callbackId = 0, callbackName

    if (typeof callback === 'function') {
      callbackId = callbackUtil.getId()
      callbackName = callbackUtil.getName(callbackId)
      window[callbackName] = callback
    }

    return callbackId
  },
  //Titans的调用callback时,把callbackId绑定在了window上,然后native调用window[callbackId]
  callback: function (callbackId, retValue, isFromMTNB) {
    this.log('[Call Callback]', callbackId)
    // handle message from native
    var win = window;
    var self = this;
    var callbackName = callbackUtil.getName(callbackId)
    var callback = window[callbackName]

    if (!callback) return
    if (retValue && isFromMTNB) retValue.__isFromMTNB = true
    setTimeout(function () { return callback.call(self, retValue); }, 0)
    var result = (retValue || {}).result
    if (result == 'complete' || result == 'error') {
      win[callbackName] = null
      delete win[callbackName]
    }
  }
}

// Adapt for MTNB call from Native
if (window.MTNB) {
  console.log('you env has already register MTNB')
} else {
  // Declare the ability of dealing with MTNB callback
  window.MTNB = {
    _handleMessageFromApp: function _handleMessageFromApp(message) {
      DPApp.log('[MTNB] ', 'get message:' , message)
      if (message.callbackId) return DPApp.callback(message.callbackId, message.data, true)
      return (messageHandlers[message.handlerId] || noop)(message.data)
    }
  }
}

//覆盖Hippo   Hippo须保证在1.2.27以上版本
if (!window.DPApp || window.DPApp.__type__ === 'hippo') {
  window.DPApp = DPApp
  DPApp.ready() // init first
}else if(window.DPApp.__name__ === 'titansX'){
  //防止titansX的DPApp重复加载
  DPApp = window.DPApp
}



if (isForceDebug()) alert('[Titans UA] ' + navigator.userAgent)

module.exports = DPApp
