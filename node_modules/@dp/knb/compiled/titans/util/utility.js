module.exports = {
  tidyUrlParams: function(url){
    //移除url中的登陆态信息，防止在分享时被泄露
    var splited = url.split('?');
    var qs = splited[1];
    var reserved = [];
    if (!qs) {
      return splited[0];
    } else {
      qs.split('&').forEach(function(q){
        var arr = q.split('=');
        var key = arr[0];
        var value = arr.length? arr[1]:undefined;
        if(!/^(newtoken|token)$/.test(key) && !(key ==='product' && value === 'dpapp')){
          reserved.push(q);
        }
      });
      return [splited[0], reserved.join('&')].join('?');
    }
  },
  sanitizeAjaxOpts: function(args) {
    args.method = args.method || 'get';
    args.data = args.data || '';
    var url = args.url;
    var data = args.data;

    if (args.method == 'get') {
      var params = [];
      for (var p in data) {
        if (data.hasOwnProperty(p) && (data[p] || data[p] === 0)) {
          params.push(p + '=' + encodeURIComponent(data[p]));
        }
      }

      if (params.length) {
        url += url.indexOf('?') == -1 ? '?' : '&';
        url += params.join('&');
      }
      args.url = url;
      delete args.data;
    }
    return args;
  },
  parseFeed: function(f){
    //分享渠道映射
    var feed;
    if (!f) {
      return 0xff;
    } else if (f.constructor.toString().indexOf('Array') >= 0) {
      feed = [0, 0, 0, 0, 0, 0, 0, 0];
      f.forEach(function(pos) {
        feed[7 - pos] = 1;
      });
      return parseInt(feed.join(''), 2);
    }
  }, 
  transModel: function(keys, obj){
    //MAPI model转换
    if(!keys){return obj;}
    var keymap = {};

    function getHash(str) {
      var hashCode = function(str) {
        var hash = 0,
          i, chr, len;
        if (str.length == 0) return hash;
        for (i = 0, len = str.length; i < len; i++) {
          chr = str.charCodeAt(i);
          hash = ((hash << 5) - hash) + chr;
          hash |= 0; // Convert to 32bit integer
        }
        return hash;
      };

      var i = hashCode(str);
      return '0x' + ((0xFFFF & i) ^ (i >>> 16)).toString(16);
    }

    function isArray(val) {
      return Object.prototype.toString.call(val) == '[object Array]';
    }

    function isObject(val) {
      return Object.prototype.toString.call(val) == '[object Object]';
    }

    function translate(obj){
      if (isObject(obj)) {
        delete obj.__name;
        for (var key in obj) {
          var val;
          if (keymap[key]) {
            val = obj[keymap[key]] = obj[key];
            translate(val);
            delete obj[key];
          }
        }
      } else if (isArray(obj)) {
        obj.forEach(function(item) {
          translate(item);
        });
      }
      return obj;
    }

    keys.forEach(function(key) {
      keymap[getHash(key)] = key;
    });

    return translate(obj);
  },
  capital: function(str){
    return str.slice(0,1).toUpperCase() + str.slice(1);
  }
};