var getUA = require('../../common/get-ua').internal;
var noop = function(){};

var _iOSNetworkType = function(result) {
  var types = {
    kSCNetworkReachabilityFlagsTransientConnection: 1 << 0,
    kSCNetworkReachabilityFlagsReachable: 1 << 1,
    kSCNetworkReachabilityFlagsConnectionRequired: 1 << 2,
    kSCNetworkReachabilityFlagsConnectionOnTraffic: 1 << 3,
    kSCNetworkReachabilityFlagsInterventionRequired: 1 << 4,
    kSCNetworkReachabilityFlagsConnectionOnDemand: 1 << 5,
    kSCNetworkReachabilityFlagsIsLocalAddress: 1 << 16,
    kSCNetworkReachabilityFlagsIsDirect: 1 << 17,
    kSCNetworkReachabilityFlagsIsWWAN: 1 << 18
  };
  var type = +result.type;
  var subType = result.subType;
  var returnValue;
  // 2g, 3g, 4g
  function getMobileType(subType) {
    switch (subType) {
      case 'CTRadioAccessTechnologyGPRS':
      case 'CTRadioAccessTechnologyEdge':
      case 'CTRadioAccessTechnologyCDMA1x':
        return '2g';
      case 'CTRadioAccessTechnologyLTE':
        return '4g';
      case 'CTRadioAccessTechnologyWCDMA':
      case 'CTRadioAccessTechnologyHSDPA':
      case 'CTRadioAccessTechnologyHSUPA':
      case 'CTRadioAccessTechnologyCDMAEVDORev0':
      case 'CTRadioAccessTechnologyCDMAEVDORevA':
      case 'CTRadioAccessTechnologyCDMAEVDORevB':
      case 'CTRadioAccessTechnologyeHRPD':
        return '3g';
    }
  }

  if ((type & types.kSCNetworkReachabilityFlagsReachable) == 0) {
    return 'none';
  }

  if ((type & types.kSCNetworkReachabilityFlagsConnectionRequired) == 0) {
    // if target host is reachable and no connection is required
    //  then we'll assume (for now) that your on Wi-Fi
    returnValue = 'wifi';
  }


  if (
    (type & types.kSCNetworkReachabilityFlagsConnectionOnDemand) != 0 ||
    (type & types.kSCNetworkReachabilityFlagsConnectionOnTraffic) != 0
  ) {
    // ... and the connection is on-demand (or on-traffic) if the
    //     calling application is using the CFSocketStream or higher APIs
    if ((type & types.kSCNetworkReachabilityFlagsInterventionRequired) == 0) {
      // ... and no [user] intervention is needed
      returnValue = 'wifi';
    }
  }

  if ((type & types.kSCNetworkReachabilityFlagsIsWWAN) == types.kSCNetworkReachabilityFlagsIsWWAN) {
    // ... but WWAN connections are OK if the calling application
    //     is using the CFNetwork (CFSocketStream?) APIs.
    returnValue = getMobileType(subType);
  }

  return returnValue;
};
var _androidNetworkType = function(result) {
  var type = result.type;
  var subType = result.subType;

  if (type == 0) {
    switch (subType) {
      case 1:
      case 2:
      case 4:
      case 7:
      case 11:
        return '2g';
      case 3:
      case 5:
      case 6:
      case 8:
      case 9:
      case 10:
      case 12:
      case 14:
      case 15:
        return '3g';
      case 13:
        return '4g';
    }
  }

  if (type == 1) {
    return 'wifi';
  } else {
    return 'none';
  }
};
var getNetwork = function(res) {
  if (/wifi|2g|3g|4g/.test(res.type)) return res.type;
  switch (getUA().osName) {
    case 'ios': return _iOSNetworkType(res);
    case 'android': return _androidNetworkType(res);
  }
  return 'unknown';
};

module.exports = {
  message: 'getNetworkType',
  mapper: function(ref) {
    var success = ref.success; if ( success === void 0 ) success = noop;
    var fail = ref.fail; if ( fail === void 0 ) fail = noop;

    return {
      success: function(result) {
        success({
          networkType: result.networkType || getNetwork(result)
        });
      },
      fail: fail
    };
  }
};
