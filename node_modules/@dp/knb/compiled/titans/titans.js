var Bridge = require('./bridge')
var baseAPIs = require('./business/base')
var mixin = require('../common/mixin')
var Semver = require('../common/semver')
var version = require('../common/version')
var getUA = require('../common/get-ua')
var util = require('./util/utility')
var dpAPIs = require('./dp/9.2.0');

var UA = getUA.internal()
var titansVersion = UA._knbVersion
var noop = function () {}

// a safe getter function
function get(obj, path) {
  var p = path.split('.');
  if (p.length == 1) return obj[p[0]];
  if (p.length == 2) return obj[p[0]][p[1]];
  if (p.length == 3) return obj[p[0]][p[1]][p[2]];
}

var Titans = {
  __version__: version,
  // 拓展的API实现
  // _apiFn_: {},
  // 当前支持的API列表
  apiList: [],
  // 存储注册事件的回调
  _eventQueue: {},
  // 存储注册事件的ID，方便unsubscribe
  _subscriptionMap: {},
  _cfg: {},
  config: function (config) {
    this._cfg = mixin(this._cfg, config)
    Bridge.config(config)
  },
  setBridge: function (bridge) { return Bridge.setBridge(bridge); },
  getBizName: function () {return this._cfg.bizname},
  ready: function (callback) { return Bridge.ready(callback); },
  log: Bridge.log.bind(Bridge),
  loadAPIs: function (ref) {
    var type = ref.type; if ( type === void 0 ) type = 'base';
    var apis = ref.apis; if ( apis === void 0 ) apis = [];

    var self = this

    apis
      .filter(Boolean)
      .forEach(function (API) {
        var name = API.name || API.message
        if (!name) return console.warn('[LoadAPI] fail', JSON.stringify(API))

        // 针对版本过滤API，如果是基础API，参考版本为titansVersion,其他参考APP版本.
        if (type === 'base' && API.version && Semver.lt(titansVersion, API.version)) return
        if (type !== 'base' && API.version && Semver.lt(UA.appVersion, API.version)) return

        // 针对操作系统过滤API
        if (API.os && API.os !== UA.osName) return

        // 记录添加的API
        self.apiList.push(name)

        if (typeof self[name] === 'function') Bridge.log('[API] ', name, ' overwrite default implementation')

        self[name] = function (opts) {
          var mapper = API.mapper || (function (x) { return x; })
          opts = mapper.call(self, opts || {})
          if (!opts) return;
          // 如果mapper没有返回值，则表示方法被JS处理，无须发送消息到客户端
          // 如果有handler，则表示参数被handler处理，无须发送消息到客户端
          if (API.handler) return API.handler.call(self, opts)
          // if has fall back, check if exists
          if (API.fallback) {
            return self._isApiSupported(API.message, function (supported) {
                if (supported) return Bridge.callNative(API.message, opts);
                return API.fallback(opts);
            });
          }
          return Bridge.callNative(API.message, opts)
        }
        // 记录原始message及fallback
        self[name].$MESSAGE = API.message
        self[name].$FALLBACK = API.fallback;
        // 给statics赋上，如KNB.share.WEIBO, KNB.share.WECHAT
        Object.keys(API.statics || {}).forEach(function (key) { return self[name][key] = API.statics[key]; })
      })
  },
  // 检查一个nativeApi是否存在
  _isApiSupported: function (nativeApiName, success) {
    return this.checkVersion({
      apis: [nativeApiName],
      success: function (data) {
        var infos = get(data, 'infos') || get(data, 'data.infos') || {}; // 容错
        success(String(infos[nativeApiName]) !== "0")
      },
      fail: function () { return success(false); }
    });
  },
  // 检查一个KNB方法是否存在
  isApiSupported: function (ref) {
    var apiName = ref.apiName;
    var success = ref.success; if ( success === void 0 ) success = noop;

    if (typeof this[apiName] === 'function') {
      var message = this[apiName].$MESSAGE
      if (!message) return success(true)   // 没有映射到native的，直接true
      if (this[apiName].$FALLBACK) return success(true);  // 有fallback的，直接true
      // 有映射到native的，询问native这个message是否存在
      return this._isApiSupported(message, success);
    }
    return this._isApiSupported(apiName, success);
  },
  use: function (api, opts) {
    if ( opts === void 0 ) opts={};

    if (typeof this[api] === 'function') return this[api](opts)
    return Bridge.callNative(api, opts)
  }
}


// 载入基础API
Titans.loadAPIs({
  type: 'base',
  apis: baseAPIs
});


//DP下重写 部分API
Titans.getUA({
  success: function (info) {
    if(info.appName === 'dianping') {
      Titans.loadAPIs({
        type: 'dp',
        apis: dpAPIs
      })
    }
  }
});

// 默认设置android的桥方式为prompt
if (UA.osName === 'android') {
  Titans.setBridge({
    name: 'prompt',
    delay: 200
  })
}

Titans.util = util
module.exports = Titans
