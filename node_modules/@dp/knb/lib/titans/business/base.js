var subscribe = require('../api/subscribe')
var unsubscribe = require('../api/unsubscribe')
var getUA = require('../../common/get-ua')
var mixin = require('../../common/mixin')
var noop = function () {}
var getNetworkType = require('../api/get-network')
var share = require('../api/share')
var qs = require('querystring')
var isWebProtocal = require('../../common/web-protocol')
var picConverter = require('../../common/picConverter');

var qparams = require('../../common/qparams');

function prependBizName (key, fail) {
  var bizName = this.getBizName()
  if (key.indexOf(':') > -1) return key
  if (bizName) return bizName + ':' + key
  this.log('bizname not configed')
  fail('bizname not config, please call KNB.confg({bizName: YOUR_BIZ_NAME})')
}

function getWebviewURI() {
  return window.TITANS_WEB_VIEW_URI || 'dianping://web'
}

module.exports = [
  {
    message: 'checkVersion'
  },
  {
    message: 'actionSheet'
  }, {
    message: 'alert'
  }, {
    name: 'closeWebview',
    message: 'closeWindow'
  }, {
    message: 'getContactList'
  }, {
    name: 'getUA',
    handler: getUA
  }, {
    message: 'confirm'
  }, {
    message: 'getVersion'
  }, {
    message: 'isInstalledApp'
  }, {
    message: 'pickContact'
  }, {
    message: 'prompt'
  }, {
    message: 'publish',
    mapper: function ({type, action, success=noop, fail=noop, data, info}) {
      //fix mtnb 实现bug(for attribute data && info);
      if (type === 'native') return {action, success, fail, data: info || data}
      var actionName = prependBizName.call(this, action, fail)
      if (actionName) return {action: actionName, success, fail, data: info || data}
    }
  }, {
    message: 'remove',
    mapper: function ({type, key, success=noop, fail=noop }) {
      if (type === 'native') return {key, success, fail}
      var newkey = prependBizName.call(this, key, fail)
      if (newkey) return {key: newkey, success, fail}
    }
  }, {
    message: 'retrieve',
    mapper: function ({type, key, success=noop, fail=noop }) {
      if (type === 'native') return {key, success, fail}
      var newkey = prependBizName.call(this, key, fail)
      if (newkey) return {key: newkey, success, fail}
    }
  }, {
    message: 'store',
    mapper: function ({type, key, value, success=noop, fail=noop }) {
      if (type === 'native') return {key, value, success, fail}
      var newkey = prependBizName.call(this, key, fail)
      if (newkey) return {key: newkey, value, success, fail}
    }
  }, {
    message: 'setLLButton'
  }, {
    message: 'setLRButton'
  }, {
    message: 'setRLButton'
  }, {
    message: 'setRRButton'
  }, {
    message: 'setTitle'
  }, {
    message: 'sendSMS'
  }, {
    message: 'setBackgroundColor'
  }, {
    message: 'setNavigationBarHidden',
    os: 'android'
  }, {
    message: 'setBouncesEnabled',
    os: 'ios'
  }, {
    message: 'setScrollEnabled',
    os: 'ios'
  }, {
    message: 'setStatusBarStyle',
    os: 'ios',
    mapper: function (_opts) {
      var opts = mixin({}, _opts)
      if (opts.style === undefined) opts.style = 0
      return opts
    }
  },
  {
    name: 'setNavButtons',
    handler: function (opts) {
      [].concat(opts).forEach(btnConfig => {
        var nobj = mixin({}, btnConfig) // create a copy
        delete nobj.position
        nobj.icon = btnConfig.type === 'base64' ? (btnConfig.icon || '').split('data:image/png;base64,')[1] : nobj.icon
        this['set' + btnConfig.position + 'Button'](nobj)
      })
    }
  },
  {
    message: 'bind'
  },
  {
    message: 'chooseImage'
  },
  {
    message: 'downloadImage'
  },
  {
    name: 'getCity',
    message: 'getCityInfo'
  },
  {
    message: 'getUserInfo',
    mapper: function (opt) {
      return mixin({}, opt, {
        success: result => opt.success(mixin(result, {
          token: result.token || result.userToken,
          uuid: result.uuid || qparams.uuid
        }))
      });
    }
  },
  {
    message: 'getFingerprint'
  },
  {
    message: 'getLocation'
  }, {
    // @deprecated
    name: 'getLocationCity',
    message: 'getCityInfo',
    mapper: function (opt) {
      return mixin({}, opt, {
        success: cityInfo => opt.success(mixin(cityInfo, {cityId: cityInfo.locCityId}))
      });
    }
  }, {
    // @dp
    message: 'getFingerprint',
    name: 'getCX'
  }, {
    message: 'analyticsTag',
    version: '8.1.6'
  }, {
    message: 'pickCity',
    version: '8.1.6'
  },
  {
    name: 'jumpWebview',
    message: 'jumpToScheme',
    mapper: function (opts) {
      if (isWebProtocal(opts.url)) {
        return mixin({}, opts, {
          url: getWebviewURI() + '?' + qs.stringify(mixin({url: opts.url}, opts.qs))
        });
      }

      return opts;
    }
  },
  {
    name: 'openWebview',
    message: 'openScheme',
    mapper: function (opts) {
      if (isWebProtocal(opts.url)) {
        return mixin({}, opts, {
          url: getWebviewURI() + '?' + qs.stringify(mixin({url: opts.url}, opts.qs))
        });
      }

      return opts;
    }
  },
  {
    name: 'configShare',
    handler: function (opts) {
      opts = mixin({}, opts)
      var handle = opts.handle || noop
      delete opts.handle
      this.setRRButton({
        icon: 'H5_Share',
        handle: () => {
          handle()
          this.share(opts)
        }
      })
    }
  },
  {
    message: 'pickCity'
  },
  {
    message: 'analyticsTag'
  },
  {
    message: 'setBarrageEnabled'
  },
  {
    message: 'getHealthData',
    os: 'ios',
    mapper: function (_opts) {
      if (!_opts) return
      var opts = mixin({}, _opts)
      // 目前支持的类型
      var typeList = [1]
      var type = opts.quantityType
      var fail = opts.fail || noop

      var start = +new Date(opts.startDate)
      var end = +new Date(opts.endDate || new Date())
      if (start > end) { fail('date error'); return; }
      if (typeList.indexOf(type) === -1) { fail('type error'); return; }
      // 单位：秒
      opts.startDate = Math.round(start / 1000)
      opts.endDate = Math.round(end / 1000)
      return opts
    }
  },
  {
    message: 'ajax',
    mapper: function (_opts) {
      var opts = mixin({}, _opts)
      opts = this.util.sanitizeAjaxOpts(opts)
      var success = opts.success || noop;
      opts.success = function (ret) {
        var result = JSON.parse(ret.mapiResult)
        result = this.transModel(opts.keys, result)
        success(result)
      };
      return opts
    }
  },
  {
    message: 'login',
    mapper: function (opts) {
      var success = opts.success || noop
      // 新版Titans增加type字段标识用户类型
      return mixin({}, opts, {
        success: function (res) {
          success(mixin({}, res, res.dpid ? {type: 'dp'} : {}, {token: res.token || res.userToken}))
        }
      })
    }
  },
  {
    message: 'logout'
  },
  {
    message: 'pay'
  },
  {
    message: 'playVoice'
  },
  {
    message: 'previewImage'
  },
  {
    message: 'setPullDown'
  },
  {
    message: 'stopPullDown'
  },
  {
    message: 'setNavigationBarHidden',
    os: 'ios'
  },
  {
    message: 'uploadPhoto',
    name: 'uploadImage',
    mapper: function (_opts) {
      var opts = mixin({}, _opts);
      var success = opts.success || noop;
      if (!opts.clientId) {
        opts.clientId = opts.bucket;
      }

      opts.success = function (result) {
        result.photoInfos = (result.photoInfos || result.ret || []).map(photo => {
          return mixin({}, photo, {picKey: picConverter(photo.picKey), originalKey: photo.picKey})
        });
        success(result);
      }

      return opts;
    }
  },
  {
    message: 'vibrate'
  },
  {
    message: 'toast'
  },
  {
    message: 'autoLock'
  },
  {
    message: 'lxlog'
  }
].concat([subscribe, unsubscribe, getNetworkType, share])
