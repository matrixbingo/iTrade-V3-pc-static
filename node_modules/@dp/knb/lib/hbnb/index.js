/*global Promise*/
var hbnb = require('@hfe/hbnb');
var version = require('../common/version');
var uncommenApis = require('./uncommon-apis');

if (typeof window !== 'undefined' && typeof window.Promise === 'undefined') {
  window.Promise = require('pinkie');
}

var debug = false;
var bizname = null;

var shareChannelMap = {
  'WECHAT_FRIENDS': 'weixinfriends',
  'WECHAT_TIMELINE': 'weixin',
  'QQ': 'qqclient',
  'SMS': 'sms',
  'WEIBO': 'sinaweibo',
  'QZONE': 'qzone',
  'EMAIL': 'email',
  // 'COPY': ''  // todo: not supported by hbnb
};

var currentButtons = {};

var availableApis = {
  'config': true,
  'isApiSupported': true,
  'use': true,
  'getUA': true,
  'getUserInfo': true,
  'getFingerprint': true,
  'getNetworkType': false,
  'login': true,
  'logout': false,
  'getLocation': true,
  'getCity': true,
  'getLocationCity': true,
  'openWebview': true,
  'jumpWebview': false,
  'closeWebview': true,
  'share': true,
  'configShare': true,
  'setTitle': true,
  'setNavButtons': true,
  'store': true,
  'retrieve': true,

  'checkVersion': false,
  'chooseImage': false,
  'uploadImage': false,
  'previewImage': false,
  'downloadImage': false,
  'publish': false,
  'subscribe': false,
  'unsubscribe': false,
  'setNavigationBarHidden': false,
  'setBackgroundColor': false,
  'setStatusBarStyle': false,
  'setBouncesEnabled': false,
  'alert': true,
  'confirm': true,
  'prompt': false,
  'sendSMS': false,
  'getContactList': false,
  'setPullDown': false,
  'stopPullDown': false

};

function noop() {
}

function isFunction(fn) {
  return typeof fn === 'function';
}

function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

function qs(key) {
  key = encodeURIComponent(key);

  var res = null;
  var search = location.search;

  var reg = new RegExp('(?:\\?|&)' + escapeRegExp(key) + '=([^&]*)(?:&|$)');
  var match = search.match(reg);

  if (match && match.length > 1) {
    res = decodeURIComponent(match[1]);
  }

  return res;
}


function xhr(url, success) {
  try {
    var _xhr = new XMLHttpRequest();
    _xhr.open("GET", url, true);
    _xhr.onreadystatechange = function() {
      if (_xhr.readyState == 4) {
        _xhr.onreadystatechange = null;
        var data = JSON.parse(_xhr.responseText);
        if (data.status == 0) {
          success(data.data);
        }
      }
    };
    _xhr.send();
  } catch (e) {
    console.error(e);
  }
}


var KNB = {
  __version__: version,

  ready: function(cb) {
    cb && cb();
  },

  config: function(opts) {
    debug = Boolean(opts.debug);
    bizname = opts.bizname;
  },

  isApiSupported: function(opts) {
    opts.success(availableApis[opts.apiName] === true);
  },

  use: function(apiName, opts) {
    apiName = apiName.replace(/^hb\./, '');
    try {
      var apiInfo = uncommenApis[apiName];
      var args = apiInfo.params.map(function(paramName) {
        return opts[paramName];
      });

      if (apiInfo.params.length === 1 && apiInfo.params[0] === 'opts') {
        args = [opts];
      }

      var res = hbnb[apiInfo.memberof][apiInfo.name].apply(null, args);

      if (apiInfo.return === 'Promise') {
        res.then(opts.success || noop, opts.fail || noop);
      } else {
        return res;
      }
    } catch (ex) {
      opts.fail && opts.fail();
    }
  },

  getUserInfo: function(opts) {
    Promise.all([
      hbnb.account.getUser(),
      // todo: there is no valid way to get uuid via hbnb
      null
    ]).then(function(values) {
      var user = values[0];
      var uuid = values[1];

      opts.success({
        type: 'mt',
        userId: user.userId,
        token: user.userToken,
        uuid: uuid
      });
    }).catch(opts.fail || noop);
  },

  getFingerprint: function(opts) {
    hbnb.pay.getFingerprint()
      .then(function(fingerprint) {
        opts.success({fingerprint: fingerprint});
      }).catch(opts.fail || noop);
  },

  getNetworkType: function() {
    if (debug) {
      console.warn('KNB: API `getNetworkType` is not supported currently.');
    }
  },

  login: function(opts) {
    hbnb.account.login()
      .then(function(user) {
        opts.success({
          type: 'mt',
          userId: user.userId,
          token: user.userToken
        });
      }).catch(opts.fail || noop);
  },

  logout: function() {
    if (debug) {
      console.warn('KNB: API `logout` is not supported currently.');
    }
  },

  getLocation: function(opts) {
    var lat = qs('lat');
    var lng = qs('lng');

    if (lat && lng) {
      setTimeout(function() {
        opts.success({
          lat: lat,
          lng: lng
        });
      }, 0);
    } else {
      setTimeout(opts.fail || noop, 0);
    }
  },

  getCity: function(opts) {
    if (!isFunction(opts.success)) {
      return;
    }

    hbnb.position.getCity()
      .then(function(city) {
        opts.success({
          type: 'mt',
          cityId: city.cityId
        });
      }).catch(opts.fail || noop);
  },

  getLocationCity: function(opts) {
    if (!isFunction(opts.success)) {
      return;
    }

    KNB.getLocation({
      success: function(loc) {
        xhr("http://i.meituan.com/locate/latlng/" + loc.lat + "," + loc.lng + ".json?ndr", function(res) {
          opts.success({
            cityId: res.id,
            type: 'mt'
          });
        });
      },
      fail: opts.fail
    });
  },

  openWebview: function(opts) {
    hbnb.webview.open(opts.url);
  },

  jumpWebview: function() {
    if (debug) {
      console.warn('KNB: API `jumpWebview` is not supported currently.');
    }
  },

  closeWebview: function() {
    hbnb.webview.close();
  },

  share: function(opts) {
    // todo: `opts.success` is not supported by hbnb
    if (!opts.channel || opts.channel.length === 0) {
      opts.channel = ['all'];
    }

    hbnb.share.callLocal(opts.channel, {
      title: opts.title,
      content: opts.desc,
      detailURL: opts.url,
      imageURL: opts.image
    });
  },

  configShare: function(opts) {
    // todo: `opts.handle` and `opts.success` are not supported by hbnb
    if (!opts.channel || opts.channel.length === 0) {
      opts.channel = ['all'];
    }

    hbnb.share.activeNavButton(opts.channel, {
      title: opts.title,
      content: opts.desc,
      detailURL: opts.url,
      imageURL: opts.image
    });
  },

  setTitle: function(opts) {
    // todo: `opts.handle` is not supported by hbnb
    hbnb.webview.setTitle(opts.title);
  },

  setNavButtons: function(buttons) {

    var hbnbButtons = [];
    buttons = [].concat(buttons);

    // todo: `button.position` in ['LL', 'LR'] is not supported by hbnb
    ['RR', 'RL'].forEach(function(position) {
      var button = buttons.filter(function(btn) {
        return position === btn.position;
      });

      if (button.length) {
        currentButtons[position] = button[button.length - 1];
      }
      button = currentButtons[position];

      if (!button || button.disable) return;

      var res = {
        callback: button.handle
      };
      switch (button.type) {
        case 'base64':
          res.type = 'icon';
          res.icon = button.icon;
          break;
        case 'text':
          res.type = 'text';
          res.text = button.text;
          res.color = button.color;
          break;
        default:
        // do nothing
      }
      hbnbButtons.push(res);
    });

    hbnb.webview.setMenus(hbnbButtons);
  },

  setLLButton: function ({handle=noop}) {
    hbnb.webview.setBackAction(handle);
  },

  store: function(opts) {
    // todo: `opts.success` is not supported by hbnb
    var key = bizname ? bizname + ':' + opts.key : opts.key;
    hbnb.storage.setItem(key, JSON.stringify(opts.value));
  },

  retrieve: function(opts) {
    var keys = opts.key.split(/:(.*)$/);
    var biz = keys.length > 1 ? keys[0] : bizname;
    var key = keys.length > 1 ? keys[1] : keys[0];
    key = biz ? biz + ':' + key : key;
    hbnb.storage.getItem(key)
      .then(function(value) {
        opts.success(JSON.parse(value));
      }).catch(opts.fail || noop);
  },

  alert: function ({message, title, handle=noop, button}) {
    hbnb.ui.alert(message, title, [{
      label: button,
      callback: function () {
        handle();
      }
    }]);
  },

  confirm: function ({message, title, okButton, cancelButton, handle=noop}) {
    hbnb.ui.confirm(message, title, {
      label: okButton,
      callback: function () {handle({ret: true});}
    },{
      label: cancelButton,
      callback: function () {handle({ret: false});}
    });
  }
};

for (var key in shareChannelMap) {
  if (shareChannelMap.hasOwnProperty(key)) {
    KNB.share[key] = shareChannelMap[key];
  }
}
KNB.getUA = require('../common/get-ua');

var logEvent = require('../common/log');
// 统计hbnb调用次数
logEvent("hbnb", version);

module.exports = KNB;
