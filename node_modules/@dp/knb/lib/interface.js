var apis = require('./api');
var mixin = require('./common/mixin');
var version = require('./common/version');
var getUA = require('./common/get-ua');
var promisify = require('./promisify');

var noop = function () {};
var cacheFns = [];

var KNB = {
  __version__: version,

  NOTIMPLEMENTED: function(apiName, opts) {
    var fail = opts.fail || noop;
    if (this._isReady) return fail({error: -1, msg: 'API [' + apiName + '] is not implemented'});
    this.cache = this.cache || [];
    this.cache.push(() => this[apiName](opts));
  },
  load: function(child) {
    mixin(this, child);

    // assign an _add method for child
    // so child can dynamically add methods
    child._add = (name, fn) => {
      this[name] = fn;
    };
  },
  _ready:function() {
    this._isReady = true;
    var tasks = this.cache || [];
    function afterReady() {
      (function doTasks(arr) {
        if (!arr.length) return;
        var task = arr.shift();
        if (typeof task === 'function') task();
        doTasks(arr);
      })(tasks);

      cacheFns.forEach(fn => fn());
    }
    // 说明具体环境脚本已经重写了ready方法
    // 此时，需要等待具体环境ready
    if (this.ready && !this.ready.isFromLoader) return this.ready(afterReady);
    afterReady();
  },
  ready: function(cb) {
    if (this._isReady) return cb();
    if (typeof cb === 'function') cacheFns.push(cb);
  },
  use: function(api, opts) {
    this.cache = this.cache || [];
    this.cache.push(() => this.use(api, opts));
  }
};
KNB.ready.isFromLoader = true;
apis.forEach(function(api) {
  KNB[api] = function(opts={}) {
    KNB.NOTIMPLEMENTED(api, opts);
  };
});
KNB.getUA = getUA; // override getUA
KNB.env = require('../env');
promisify(KNB);

module.exports = KNB;
