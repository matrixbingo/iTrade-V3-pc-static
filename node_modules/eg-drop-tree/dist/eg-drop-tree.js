(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("react")) : factory(root["React"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_5__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(3);


/***/ },
/* 1 */,
/* 2 */,
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _componentsMultiDropDownMenuJs = __webpack_require__(4);

	var _componentsMultiDropDownMenuJs2 = _interopRequireDefault(_componentsMultiDropDownMenuJs);

	//下拉层级菜单

	__webpack_require__(6);
	if (window.Eagleui) {
	    Eagleui.MultiDropDown = _componentsMultiDropDownMenuJs2['default'];
	} else {
	    window.MultiDropDown = _componentsMultiDropDownMenuJs2['default'];
	};
	module.exports = _componentsMultiDropDownMenuJs2['default'];

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by slashhuang on 16/5/11.
	 * 层级下拉菜单栏
	 * 组件建模
	 * 1. dropDownQueue
	 *    === ===[鼠标当前停留的位置，对应的源数组序列号数组]，比如[1,2]代表现在是dropDownData[1].children[2].children数据节点上
	 * 2. formGroup
	 *    === ===[鼠标点击过的数据值存储]
	 * 3. dropDownBranch
	 *    === ===[树状节点的checkbox数据model]
	 * 4. depth
	 *    === ===[目前鼠标点击或者mouseOver的对象对应的上级菜单数据节点]
	 * 5. index
	 *    === ===[目前鼠标点击的列表中的哪一项]
	 *
	 */
	'use strict';

	exports.__esModule = true;

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(5);

	var _react2 = _interopRequireDefault(_react);

	var MultiDropDownMenu = (function (_Component) {
	    _inherits(MultiDropDownMenu, _Component);

	    function MultiDropDownMenu(props, context) {
	        _classCallCheck(this, MultiDropDownMenu);

	        _Component.call(this, props, context);
	        this.state = {
	            dropDownBranch: [], //树状分支节点鼠标点击事件存取,
	            dropDownQueue: [],
	            partSelectBranch: {}, //分支节点的map，只要其子节点至少有一个被选中，就将该节点cache进来
	            formGroup: [], //最后存取的数据
	            title: props.title,
	            keyName: props.keyName,
	            leafName: props.leafName
	        };
	        this.formData = this.state.formGroup;
	        this.treePathMap = {};
	        var activeNodeList = [],
	            activeBranchList = [],
	            partSelectBranch = {};
	        this.generateTreePathMap(this.treePathMap, this.props, activeNodeList, activeBranchList, partSelectBranch);
	        this.state.formGroup = activeNodeList;
	        this.state.dropDownBranch = activeBranchList;
	        this.state.partSelectBranch = partSelectBranch;
	        this.state.title = this.renderTitle(activeNodeList) || this.props.title;
	    }

	    MultiDropDownMenu.prototype.generateTreePathMap = function generateTreePathMap(treePathMap, props, activeNodeList, activeBranchList, partSelectBranch) {
	        //缓存所有节点的路径信息，根节点的index假设为-1
	        var dropDownData = props.dropDownData;
	        var selected = props.selected;

	        var selectedMap = {};
	        if (selected) {
	            var selectedList = selected.split(',');
	            selectedList.forEach(function (id) {
	                selectedMap[id] = true;
	            });
	        }
	        this.climbTree('-1', dropDownData, treePathMap, selectedMap, activeNodeList);
	        this.selectActiveBranchNode({
	            typeId: '-1',
	            children: dropDownData
	        }, activeBranchList, selectedMap);

	        this.findPartSelectBranchNode({
	            typeId: '-1',
	            children: dropDownData
	        }, partSelectBranch, selectedMap);
	        //目前partSelectBranch包含子节点全选中的情况，需要将这种情况排除
	        activeBranchList.forEach(function (item) {
	            if (partSelectBranch[item.typeId]) {
	                delete partSelectBranch[item.typeId];
	            }
	        });
	    };

	    MultiDropDownMenu.prototype.findPartSelectBranchNode = function findPartSelectBranchNode(item, partSelectBranch, selectedMap) {
	        var self = this;
	        var itemChildren = item.children ? item.children : [];
	        if (itemChildren.length == 0) {
	            if (selectedMap[item.typeId]) {
	                return true;
	            } else {
	                return false;
	            }
	        } else {
	            var partSelect = false;

	            for (var subIndex = 0; subIndex < itemChildren.length; subIndex++) {
	                partSelect = self.findPartSelectBranchNode(itemChildren[subIndex], partSelectBranch, selectedMap) || partSelect;
	            }
	            if (partSelect) {
	                if (item.typeId != -1) {
	                    partSelectBranch[item.typeId] = true;
	                }
	            }
	            return partSelect;
	        }
	    };

	    MultiDropDownMenu.prototype.selectActiveBranchNode = function selectActiveBranchNode(item, activeBranchList, selectedMap) {
	        var self = this;
	        var itemChildren = item.children ? item.children : [];
	        if (itemChildren.length == 0) {
	            if (selectedMap[item.typeId]) {
	                return true;
	            } else {
	                return false;
	            }
	        } else {
	            var childrenSelectAll = true;

	            for (var subIndex = 0; subIndex < itemChildren.length; subIndex++) {
	                childrenSelectAll = self.selectActiveBranchNode(itemChildren[subIndex], activeBranchList, selectedMap) && childrenSelectAll;
	            }
	            if (childrenSelectAll) {
	                if (item.typeId != -1) {
	                    activeBranchList.push(item);
	                }
	            }
	            return childrenSelectAll;
	        }
	    };

	    MultiDropDownMenu.prototype.climbTree = function climbTree(path, list, treePathMap, selectedMap, activeNodeList) {
	        var self = this;
	        if (list && list.length) {
	            list.forEach(function (item, index) {
	                var currentPath = path + ',' + index,
	                    itemChildren = item.children;
	                treePathMap[item.typeId] = currentPath;
	                if (selectedMap && selectedMap[item.typeId]) {
	                    activeNodeList.push(item);
	                }
	                if (itemChildren && itemChildren.length) {
	                    self.climbTree(currentPath, itemChildren, treePathMap, selectedMap, activeNodeList);
	                }
	            });
	        }
	    };

	    MultiDropDownMenu.prototype.getParams = function getParams() {
	        return this.state.formGroup.map(function (item) {
	            return item.typeId;
	        });
	    };

	    /**
	     * 渲染标题
	     * @param formGroup
	     *
	     * @return {*}
	     */

	    MultiDropDownMenu.prototype.renderTitle = function renderTitle(formGroup) {
	        var keyName = this.state.keyName;
	        return formGroup && formGroup.reduce(function (pre, ele) {
	            return pre + ele[keyName] + ';';
	        }, '');
	    };

	    /**
	     * 处理多选框点击操作
	     * @param ele
	     */

	    MultiDropDownMenu.prototype.checkboxHandler = function checkboxHandler(ele) {
	        var cachedFormGroup = this.state.formGroup,
	            cachedDropDownBranch = this.state.dropDownBranch;
	        /**
	         * 按照如下格式存取对外调用的数据，确保完备
	         * [ele]//ele为数组中的每一项
	         */
	        var targetIndex = cachedFormGroup.indexOf(ele);
	        if (targetIndex > -1) {
	            cachedFormGroup.splice(targetIndex, 1);
	        } else {
	            cachedFormGroup.push(ele);
	        }
	        this.updateParentNode(ele, cachedDropDownBranch, cachedFormGroup);
	        var selectedIdList = cachedFormGroup.map(function (item) {
	            return item.typeId;
	        });
	        this.props.onChange && this.props.onChange(selectedIdList.join(','));
	        //this.setState({
	        //    formGroup:cachedFormGroup,
	        //    dropDownBranch:cachedDropDownBranch,
	        //    title:this.renderTitle(cachedFormGroup)||this.props.title
	        //})
	    };

	    MultiDropDownMenu.prototype.renderList = function renderList(type, ele, activeIndex, index, depth) {
	        var _this = this;

	        var xml = null;
	        var _state = this.state;
	        var formGroup = _state.formGroup;
	        var keyName = _state.keyName;
	        var dropDownBranch = _state.dropDownBranch;
	        var partSelectBranch = _state.partSelectBranch;

	        if (type == 'branch') {
	            //树枝节点
	            xml = _react2['default'].createElement(
	                'li',
	                { key: depth + ele['typeId'], title: ele[keyName], className: index == activeIndex ? "on" : '',
	                    onClick: function () {
	                        //设置branch数据状态
	                        _this.branchCheckBoxHandler(ele);
	                    } },
	                _react2['default'].createElement(
	                    'div',
	                    { className: 'multi-list-checkbox' },
	                    _react2['default'].createElement('b', { className: (dropDownBranch.indexOf(ele) >= 0 ? 'active' : '') + (partSelectBranch[ele.typeId] ? ' part-select' : '') })
	                ),
	                _react2['default'].createElement(
	                    'div',
	                    { className: 'multi-drop-down-list-content',
	                        onMouseOver: function () {
	                            _this.calculateNextMenuTree(depth, index);
	                        }
	                    },
	                    ele[keyName]
	                ),
	                _react2['default'].createElement('em', null)
	            );
	        } else {
	            //如果数据在formGroup里面，则勾选
	            xml = _react2['default'].createElement(
	                'li',
	                { title: ele[keyName], className: 'multi-drop-down-input', onClick: function () {
	                        _this.checkboxHandler(ele);
	                    }, key: depth + ele['typeId'] },
	                _react2['default'].createElement(
	                    'i',
	                    { className: formGroup.indexOf(ele) < 0 ? 'check-box' : 'check-box active' },
	                    _react2['default'].createElement('b', null)
	                ),
	                _react2['default'].createElement(
	                    'div',
	                    { className: 'select-drop-down-check-content' },
	                    ' ',
	                    ele[keyName]
	                )
	            );
	        }
	        return xml;
	    };

	    /**
	     * 计算新的menu队列数据
	     * @param depth 状态数组深度
	     * @param index 替换的序数号
	     */

	    MultiDropDownMenu.prototype.calculateNextMenuTree = function calculateNextMenuTree(depth, index) {
	        var cachedDropDownQueue = this.state.dropDownQueue;
	        cachedDropDownQueue = cachedDropDownQueue.slice(0, depth); //每次鼠标浮动，保留之前的
	        cachedDropDownQueue[depth] = index; //队列尾部添加序数号
	        //推入数据
	        this.setState({
	            dropDownQueue: cachedDropDownQueue
	        });
	        return cachedDropDownQueue;
	    };

	    MultiDropDownMenu.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (nextProps.dropDownData) {
	            var activeNodeList = [],
	                activeBranchList = [],
	                partSelectBranch = {};
	            this.generateTreePathMap(this.treePathMap, nextProps, activeNodeList, activeBranchList, partSelectBranch);
	            this.setState({
	                formGroup: activeNodeList,
	                title: this.renderTitle(activeNodeList) || this.props.title,
	                dropDownBranch: activeBranchList,
	                partSelectBranch: partSelectBranch
	            });
	        }
	    };

	    MultiDropDownMenu.prototype.updateParentNode = function updateParentNode(ele, dropDownBranch, formGroup) {
	        var treePathMap = this.treePathMap;
	        var dropDownData = this.props.dropDownData;

	        var path = [];
	        if (treePathMap[ele.typeId]) {
	            path = treePathMap[ele.typeId].split(',');
	        } else {
	            return;
	        }
	        //去除根节点-1
	        path.shift();
	        //去除自身index，只留下中间路径
	        path.pop();
	        var sblings = dropDownData,
	            parent = {
	            typeId: '0'
	        };
	        if (path.length) {
	            path.forEach(function (index) {
	                parent = sblings[index];
	                sblings = sblings[index].children;
	            });
	            //console.log(path,sblings)
	            var cachedMap = {};
	            dropDownBranch.forEach(function (item) {
	                cachedMap[item.typeId] = true;
	            });
	            formGroup.forEach(function (item) {
	                cachedMap[item.typeId] = true;
	            });
	            //console.log(cachedMap);
	            var currentId = ele.typeId;
	            //勾中checkbox,要检查是否全部勾中
	            if (cachedMap[currentId]) {
	                var selectAll = true;
	                sblings.forEach(function (item) {
	                    if (!cachedMap[item.typeId]) {
	                        selectAll = false;
	                    }
	                });
	                //如果全部勾中，需要添加parent节点
	                if (selectAll) {
	                    if (parent.typeId != '0') {
	                        dropDownBranch.push(parent);
	                        this.updateParentNode(parent, dropDownBranch, formGroup);
	                    }
	                }
	            } else {
	                //取消勾选
	                var index = dropDownBranch.indexOf(parent);
	                index > -1 && dropDownBranch.splice(index, 1);
	                if (parent.typeId != '0') {
	                    this.updateParentNode(parent, dropDownBranch, formGroup);
	                }
	            }
	        }
	    };

	    /**
	     * 处理点击树状节点操作，只需考虑子节点的情况
	     *
	     * 增加自动勾选所有的子级别目录 2016.6.15 *__*
	     *
	     * @param ele
	     */

	    MultiDropDownMenu.prototype.branchCheckBoxHandler = function branchCheckBoxHandler(ele) {
	        var _state2 = this.state;
	        var dropDownBranch = _state2.dropDownBranch;
	        var formGroup = _state2.formGroup;

	        //formGroup数据处理
	        //树枝节点的处理
	        var cachedDropDownBranch = dropDownBranch.slice();
	        var cachedFormGroup = formGroup.slice();

	        var targetIndex = cachedDropDownBranch.indexOf(ele);
	        if (targetIndex > -1) {
	            cachedDropDownBranch.splice(targetIndex, 1);
	            this.iterateSourceData(ele.children, function (data) {
	                if (data && !data.leaf) {
	                    var index = cachedDropDownBranch.indexOf(data);
	                    index > -1 && cachedDropDownBranch.splice(index, 1);
	                } else {
	                    var index = cachedFormGroup.indexOf(data);
	                    index > -1 && cachedFormGroup.splice(index, 1);
	                }
	            });
	        } else {
	            cachedDropDownBranch.push(ele);
	            //遍历子树，推送所有的branch
	            this.iterateSourceData(ele.children, function (data) {
	                if (data && !data.leaf) {
	                    var index = cachedDropDownBranch.indexOf(data);
	                    index < 0 && cachedDropDownBranch.push(data);
	                } else {
	                    var index = cachedFormGroup.indexOf(data);
	                    index < 0 && cachedFormGroup.push(data);
	                }
	            });
	        }
	        this.updateParentNode(ele, cachedDropDownBranch, cachedFormGroup);
	        //console.log('branch',this.state,{
	        //    dropDownBranch:cachedDropDownBranch,
	        //    formGroup:cachedFormGroup,
	        //    title:this.renderTitle(cachedFormGroup)||this.props.title
	        //})
	        var selectedIdList = cachedFormGroup.map(function (item) {
	            return item.typeId;
	        });
	        this.props.onChange && this.props.onChange(selectedIdList.join(','));
	        //this.setState({
	        //    dropDownBranch:cachedDropDownBranch,
	        //    formGroup:cachedFormGroup,
	        //    title:this.renderTitle(cachedFormGroup)||this.props.title
	        //})
	    };

	    /**
	     * 遍历数据，执行自定义操作
	     */

	    MultiDropDownMenu.prototype.iterateSourceData = function iterateSourceData(data, callback) {
	        var func = function func(data) {
	            for (var i = 0; i < data.length; i++) {
	                callback(data[i]);
	                if (data[i] && data[i].children) {
	                    func(data[i].children);
	                }
	            }
	        };
	        func(data);
	    };

	    MultiDropDownMenu.prototype.getSourceData = function getSourceData(preQueue) {
	        var dropDownData = this.props.dropDownData;

	        return preQueue.reduce(function (pre, cur) {
	            return pre[cur].children;
	        }, dropDownData);
	    };

	    /**
	     * 下拉children所需要的数据形式
	     * [1,2,3]=>
	     * dropDownData[1].children//第1层
	     * dropDownData[1].children[2].children
	     * dropDownData[1].children[2].children[3]
	     * @type {{dropDownQueue: Array}}
	     */

	    MultiDropDownMenu.prototype.renderQueuedMenu = function renderQueuedMenu(dropDownQueue) {
	        var _this2 = this;

	        var cachedData = [];
	        dropDownQueue.reduce(function (preQueue, cur) {
	            /**
	             * 参数叠加
	             */
	            preQueue.push(cur);

	            /**
	             * 往数组推送数据
	             */
	            var childMenuSourceData = _this2.getSourceData.call(_this2, preQueue);
	            if (childMenuSourceData && childMenuSourceData.length > 0) {
	                cachedData.push(_this2.renderChildMenu(childMenuSourceData, preQueue.length, dropDownQueue));
	            }
	            return preQueue;
	        }, []);
	        return cachedData;
	    };

	    /**
	     *
	     * @param listData 菜单数据
	     * @param depth 菜单深度(parent的节点)
	     * @return {XML}
	     * active的序数号码dropDownQueue[depth+1]
	     */

	    MultiDropDownMenu.prototype.renderChildMenu = function renderChildMenu(listData, depth, dropDownQueue) {
	        var _this3 = this;

	        var leafName = this.state.leafName;

	        var activeIndex = dropDownQueue[depth];
	        var XML = _react2['default'].createElement(
	            'ul',
	            { className: 'multi-drop-down-list select-drop-down-list', key: depth },
	            listData && listData.map(function (ele, index) {
	                return ele[leafName] ? _this3.renderList('leaf', ele, activeIndex, index, depth) : _this3.renderList('branch', ele, activeIndex, index, depth);
	            })
	        );
	        return XML;
	    };

	    MultiDropDownMenu.prototype.render = function render() {
	        var _this4 = this;

	        var dropDownData = this.props.dropDownData;
	        var _state3 = this.state;
	        var dropDownQueue = _state3.dropDownQueue;
	        var title = _state3.title;

	        return _react2['default'].createElement(
	            'div',
	            { className: 'question-multi-menu' },
	            _react2['default'].createElement(
	                'div',
	                { className: 'question-multi-menu-head', onMouseOver: function () {
	                        _this4.setState({
	                            dropDownQueue: []
	                        });
	                    } },
	                _react2['default'].createElement(
	                    'span',
	                    { className: 'drop-down-hint' },
	                    title
	                ),
	                _react2['default'].createElement('i', { className: 'drop-down-arrow' })
	            ),
	            dropDownData && dropDownData.length > 0 ? _react2['default'].createElement(
	                'div',
	                { className: 'question-multi-menu-body' },
	                this.renderChildMenu(dropDownData, 0, dropDownQueue),
	                /*来自第0层*/
	                this.renderQueuedMenu(dropDownQueue)
	            ) : null
	        );
	    };

	    _createClass(MultiDropDownMenu, null, [{
	        key: 'defaultProps',
	        value: {
	            leafName: 'leaf',
	            keyName: 'keyName',
	            title: '下拉菜单'
	        },
	        enumerable: true
	    }, {
	        key: 'propTypes',
	        value: {
	            /**
	             * ui展示的数据结构中的键值
	             * */
	            keyName: _react.PropTypes.string,
	            /**
	             * 初始化展示头部文字
	             * */
	            title: _react.PropTypes.string,
	            /**
	             * 叶子节点的键值(true or false)
	             * */
	            leafName: _react.PropTypes.string
	        },
	        enumerable: true
	    }]);

	    return MultiDropDownMenu;
	})(_react.Component);

	exports['default'] = MultiDropDownMenu;
	module.exports = exports['default'];

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ },
/* 6 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }
/******/ ])
});
;