/**
 * Grid
 * --------------------------------------------------
 * Using flexbox for the grid, inspired by Philip Walton:
 * http://philipwalton.github.io/solved-by-flexbox/demos/grids/
 * By default each .uc-col within a .uc-row will evenly take up
 * available width, and the height of each .uc-col with take
 * up the height of the tallest .uc-col in the same .uc-row.
 */
.grid{
  overflow: hidden;
}
.grid-fluid {
   margin-right: auto;
   margin-left: auto;
   padding-left: 15px;
   padding-right: 15px;
}

.row {
  .display-flex();
  margin: 0  -(@grid-padding-width + 5);
  /*width: 100%;*/
}

.row-wrap {
.flex-wrap(wrap);
}

.row.no-padding {
  padding: 0;
  margin:0;
  > .col {
    padding: 0;
  }
}
.row-no-padding{
  .row{
    padding: 0;
    margin:0;
    > .col {
      padding: 0;
    }
  }
}
/*.row + .row {
  margin-top: (@grid-padding-width / 2) * -1;
  padding-top: 0;
}*/

.col {
.flex(1);
  display: block;
  padding: (@grid-padding-width / 2) @grid-padding-width + 5;
  width: 100%;
}


/* Vertically Align Columns */
/* .row-* vertically aligns every .col in the .row */
.row-top {
.align-items(flex-start);
}
.row-bottom {
.align-items(flex-end);
}
.row-center {
.align-items(center);
}
.row-stretch {
.align-items(stretch);
}
.row-baseline {
.align-items(baseline);
}

/* .col-* vertically aligns an individual .col */
.col-top {
.align-self(flex-start);
}
.col-bottom {
.align-self(flex-end);
}
.col-center {
.align-self(center);
}

/* Column Offsets */

.generate-columns-offsets(100);

.generate-columns-offsets(@n, @i: 5) when (@i =< @n) {
  .col-offset-@{i} {
    margin-left: @i * 100% / @n;
  }
  .generate-columns-offsets(@n, (@i + 5));
}
.col-offset-33, .col-offset-34 {
  margin-left: 33.3333%;
}
.col-offset-66, .col-offset-67 {
  margin-left: 66.6666%;
}
/* Explicit Column Percent Sizes */
/* By default each grid column will evenly distribute */
/* across the grid. However, you can specify individual */
/* columns to take up a certain size of the available area */

.generate-columns(100);

.generate-columns(@n, @i: 5) when (@i =< @n) {
  .col-@{i} {
    .flex(0, 0, @i * 100% / @n);
    max-width: (@i * 100% / @n);
  }
  .generate-columns(@n, (@i + 5));
}



.col-33, .col-34 {
.flex(0, 0, 33.3333%);
  max-width: 33.3333%;
}

.col-66, .col-67 {
.flex(0, 0, 66.6666%);
  max-width: 66.6666%;
}
