'use strict';

exports.__esModule = true;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _NodeJs = require('./Node.js');

var _NodeJs2 = _interopRequireDefault(_NodeJs);

var _default = (function (_Component) {
    _inherits(_default, _Component);

    _createClass(_default, null, [{
        key: 'defaultProps',
        value: {
            idKey: 'typeId',
            contentKey: 'typeName',
            expandNodes: ''
        },
        enumerable: true
    }]);

    function _default(props, context) {
        _classCallCheck(this, _default);

        _Component.call(this, props, context);
        var expandNodes = props.expandNodes || {};
        this.state = {
            expandNodes: expandNodes
        };
    }

    _default.prototype.getExpandNodes = function getExpandNodes() {
        return this.state.expandNodes;
    };

    _default.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {

        var expandNodes = nextProps.expandNodes || {};
        this.state = {
            expandNodes: expandNodes
        };
    };

    _default.prototype.renderTree = function renderTree() {
        var data = this.props.data;
        return this.renderNode(data);
    };

    _default.prototype.nodeClickCallback = function nodeClickCallback(nodeId, type) {
        var clickCallback = this.props.clickCallback;

        clickCallback && clickCallback(nodeId, type);
    };

    _default.prototype.toggleCallback = function toggleCallback(nodeId) {
        var expandNodes = this.state.expandNodes;

        if (expandNodes[nodeId]) {
            delete expandNodes[nodeId];
        } else {
            expandNodes[nodeId] = true;
        }
        this.setState({
            expandNodes: expandNodes
        });
    };

    _default.prototype.renderNode = function renderNode(data) {
        var self = this;
        var _self$props = self.props;
        var idKey = _self$props.idKey;
        var contentKey = _self$props.contentKey;
        var expandNodes = self.state.expandNodes;

        return data.map(function (item, index) {
            var children = null,
                itemKey = item[idKey];
            if (item.children && item.children.length) {
                children = self.renderNode(item.children);
            }
            return _react2['default'].createElement(
                'div',
                { key: 'level-' + itemKey },
                _react2['default'].createElement(_NodeJs2['default'], { toggleCallback: self.toggleCallback.bind(self),
                    clickCallback: self.nodeClickCallback.bind(self),
                    type: children ? 'branch' : 'leaf',
                    nodeId: itemKey,
                    expand: expandNodes[itemKey],
                    nodeContent: item[contentKey],
                    selected: self.props.selected == itemKey }),
                expandNodes[itemKey] ? _react2['default'].createElement(
                    'div',
                    { className: 'node-container', key: 'container-' + itemKey },
                    children
                ) : null
            );
        });
    };

    _default.prototype.render = function render() {
        var tree = this.renderTree();
        return _react2['default'].createElement(
            'div',
            null,
            tree
        );
    };

    return _default;
})(_react.Component);

exports['default'] = _default;
module.exports = exports['default'];