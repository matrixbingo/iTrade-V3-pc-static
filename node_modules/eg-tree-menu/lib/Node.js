'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var Node = (function (_Component) {
    _inherits(Node, _Component);

    function Node() {
        _classCallCheck(this, Node);

        _Component.apply(this, arguments);
    }

    Node.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
        return !(this.props.nodeContent == nextProps.nodeContent && this.props.type == nextProps.type && this.props.expand == nextProps.expand && this.props.selected == nextProps.selected);
    };

    Node.prototype.clickCallback = function clickCallback() {
        this.props.clickCallback && this.props.clickCallback(this.props.nodeId, this.props.type);
    };

    Node.prototype.toggleCallback = function toggleCallback() {
        if (this.props.type == 'branch') {
            this.props.toggleCallback(this.props.nodeId);
        }
    };

    //nodeId,nodeContent

    Node.prototype.render = function render() {
        var _props = this.props;
        var type = _props.type;
        var expand = _props.expand;
        var selected = _props.selected;

        return _react2['default'].createElement(
            'div',
            { className: 'tree-node ' + type },
            _react2['default'].createElement(
                'div',
                { className: 'content ' + (selected ? 'selected' : '') },
                _react2['default'].createElement(
                    'span',
                    { onClick: this.toggleCallback.bind(this) },
                    _react2['default'].createElement('i', { className: (expand ? 'expand' : '') + ' pre-i' })
                ),
                _react2['default'].createElement(
                    'span',
                    { title: this.props.nodeContent, onClick: this.clickCallback.bind(this) },
                    this.props.nodeContent
                )
            )
        );
    };

    return Node;
})(_react.Component);

exports['default'] = Node;
module.exports = exports['default'];